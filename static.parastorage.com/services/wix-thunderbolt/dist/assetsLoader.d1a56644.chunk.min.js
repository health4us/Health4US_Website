"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [8264, 7224], {
        5744: function(e, t, a) {
            a.r(t), a.d(t, {
                ProtectedPagesApiSymbol: function() {
                    return S
                },
                page: function() {
                    return E
                },
                site: function() {
                    return y
                }
            });
            var n, s = a(27956),
                r = a(23604),
                i = a(10388);
            ! function(e) {
                e.SM = "SM", e.Pass = "PASS", e.NONE = "NONE"
            }(n || (n = {}));
            const o = (0, s.ic)([(0, s.iE)(r.GQ, i.N), (0, s.iE)(r.e8, i.N), (0, s.iE)(r.a_, i.N)], ((e, t, a) => {
                const s = a => {
                    const s = e.pagesSecurity[a];
                    return s && s.requireLogin ? n.SM : t.passwordProtected[a] || s && s.passwordDigest ? n.Pass : n.NONE
                };
                return {
                    async handle(t) {
                        if (t.pageJsonFileName) return t;
                        const r = t.pageId,
                            {
                                pagesMap: i,
                                loginAndNavigate: o,
                                authenticateUsingSitePassword: c,
                                completedSitePasswordAuth: g
                            } = a.get();
                        if (i[r]) return { ...t,
                            pageJsonFileName: i[r]
                        };
                        if (s("masterPage") === n.Pass && !g) return c(t), null;
                        const u = s(r);
                        return u === n.NONE && ((e, t) => {
                            throw new Error(`we do not have authentication info for protected page ${e} page security: ${t}`)
                        })(r, e.pagesSecurity[r]), o(t, u), null
                    }
                }
            }));
            var c = a(664),
                g = a(10460),
                u = a(81016),
                p = a(81512),
                d = a(57748),
                P = a(84403),
                l = a(82560),
                h = a(34148);
            const w = (0, s.ic)([(0, s.iE)(r.a_, i.N), (0, s.iE)(r.e8, i.N), (0, s.iE)(r.GQ, i.N), c.E5, P.MN, (0, s.Q3)(u.oT), (0, s.Q3)(p.gd), d._6, l.Q5, h.W], ((e, {
                publicPageIds: t,
                pageUriSeoToRouterPrefix: a
            }, {
                customNoPermissionsPageUriSeo: s,
                customNoPermissionsPageId: r
            }, i, o, c, u, p, d, P) => {
                const l = async (e, t) => e === n.SM ? (async () => {
                        let e;
                        if (c)
                            if (P["specs.thunderbolt.newAuthorizedPagesFlow"]) {
                                if (e = await c.requestAuthorizedPages(), e.success) return {
                                    authorizedPagesMap: e.pages,
                                    onProtectedPageNavigationComplete: async () => {
                                        window.document.title = await p.getPageTitle()
                                    }
                                }
                            } else if (e = await c.requestAuthentication({}), e.success) return {
                            authorizedPagesMap: await c.authorizeMemberPagesByToken(e.token)
                        };
                        return {
                            authorizedPagesMap: {},
                            authenticationResult: e
                        }
                    })() : (async e => u ? u.promptPagePasswordDialog(e) : {
                        authorizedPagesMap: {}
                    })(t),
                    h = async (e, t, n = !1) => {
                        if (s && n) {
                            const t = `${a[s]?`./${a[s]}/`:"./"}${s}`;
                            return i.navigate(`${t}?appSectionParams=${JSON.stringify({restrictedPageId:e.pageId,restrictedPagePath:(e.relativeEncodedUrl??"").replace("./","/")})}`)
                        }
                        if (c && "SM" === t) {
                            const e = () => {
                                o.isLandingOnProtectedPage() && i.navigate("./")
                            };
                            return c.showNoPermissionsToPageDialog(e), !1
                        }
                        return !!o.isLandingOnProtectedPage() && i.navigate("./")
                    };
                async function w(t) {
                    if (!u) return;
                    const {
                        authorizedPagesMap: a,
                        onComplete: n
                    } = await u.promptSitePasswordDialog();
                    e.update((e => ({ ...e,
                        pagesMap: Object.assign(e.pagesMap, a),
                        completedSitePasswordAuth: !0
                    }))), await i.navigate(t.parsedUrl.href), n ? .()
                }
                const N = async (a, n) => {
                    const s = a.pageId;
                    try {
                        const {
                            authorizedPagesMap: c,
                            authenticationResult: u,
                            onProtectedPageNavigationComplete: p
                        } = await l(n, s);
                        if (e.update((e => ({ ...e,
                                pagesMap: Object.assign(e.pagesMap, c)
                            }))), u ? .reason === g.SU.CANCELED) return !!o.isLandingOnProtectedPage() && i.navigate("./");
                        if (c[s]) {
                            const e = await i.navigate(a.parsedUrl.href);
                            return p ? .(), e
                        } {
                            const s = t.includes(r),
                                i = Boolean(e.get().pagesMap[r]);
                            return h(a, n, s || i)
                        }
                    } catch (e) {
                        return d.captureError(e, {
                            tags: {
                                feature: "protectedPage"
                            }
                        }), h(a, n)
                    }
                };
                return e.update((() => ({
                    loginAndNavigate: N,
                    authenticateUsingSitePassword: w,
                    completedSitePasswordAuth: !1,
                    pagesMap: {}
                }))), {
                    appWillMount: async () => {}
                }
            }));
            var N = a(5632),
                f = a(9352);
            const M = (0, s.ic)([(0, s.iE)(r.a_, i.N), u.oT], ((e, t) => ({
                getTpaHandlers() {
                    return {
                        authorizeMemberPages: async () => {
                            const a = await t.authorizeMemberPagesByCookie();
                            e.update((e => ({ ...e,
                                pagesMap: { ...e.pagesMap,
                                    ...a
                                }
                            })))
                        }
                    }
                }
            })));
            const m = (0, s.ic)([(0, s.iE)(r.a_, i.N)], (function(e) {
                    return {
                        getPageJsonFileName(t) {
                            return e.get() ? .pagesMap[t] ? ? null
                        }
                    }
                })),
                S = Symbol("ProtectedPagesApiSymbol"),
                y = e => {
                    e(c.Y5.Protected).to(o), e(N.c.AppWillMountHandler).to(w), e(S).to(m)
                },
                E = e => {
                    e(f.YN).to(M)
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/assetsLoader.d1a56644.chunk.min.js.map