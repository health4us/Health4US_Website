import {
    __assign,
    __extends,
    __spreadArray
} from "tslib";
import {
    typeForDisplay,
    isDate,
    isString,
    isNumber
} from '@wix/wix-data-utils';
import {
    AggregatingValidator,
    messages,
    validationError,
} from '@wix/wix-data-errors';
import {
    filterMixin as genericFilterMixin,
} from '@wix/filter-builder';
var filterMixin = function(Base) {
    if (Base === void 0) {
        Base = (function() {
            function class_1() {}
            return class_1;
        }());
    }
    return (function(_super) {
        __extends(class_2, _super);

        function class_2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_2.prototype.or = function(otherQuery) {
            var orQuery = _super.prototype.or.apply(this, arguments);
            return this._validateCollectionName(orQuery, otherQuery, '.or');
        };
        class_2.prototype.and = function(otherQuery) {
            var andQuery = _super.prototype.and.apply(this, arguments);
            return this._validateCollectionName(andQuery, otherQuery, '.and');
        };
        class_2.prototype.not = function(otherQuery) {
            var notQuery = _super.prototype.not.apply(this, arguments);
            return this._validateCollectionName(notQuery, otherQuery, '.not');
        };
        class_2.prototype._validateCollectionName = function(query, originalQuery, operationName) {
            if (query.invalidArguments.length > 0) {
                return query;
            }
            var withCollectionName = withCollectionNameIfUnset(originalQuery, this.collectionName);
            var _a = new FilterValidator(operationName, query.invalidArguments, this.constructor, this.constructorName)
                .isForCollection(withCollectionName, this.collectionName)
                .validateAndAggregate(),
                newInvalidArguments = _a[0],
                valid = _a[1];
            if (!valid) {
                return this._copy(this.filterTree, newInvalidArguments);
            }
            return query;
        };
        class_2.prototype._matchesUrlized = function(field, operand) {
            var _a = this._filterValidator('._matchesUrlized')
                .arityIsTwo(arguments)
                .validFieldName(field)
                .typeIsString(operand)
                .validateAndAggregate(),
                newInvalidArguments = _a[0],
                valid = _a[1];
            if (valid) {
                var newFilterTree = this._makeNewFilter.apply(this, __spreadArray([field], createMatchesOrInFilter(operand), false));
                return this._copy(newFilterTree, newInvalidArguments);
            }
            return this._copy(this.filterTree, newInvalidArguments);
        };
        class_2.prototype.getFilterModel = function() {
            if (this.invalidArguments.length > 0) {
                throw validationError(messages.filterBuilderInvalid(this.invalidArguments));
            }
            return _super.prototype.getFilterModel.call(this);
        };
        class_2.prototype._filterValidator = function(filterOperatorName) {
            return new FilterValidator(filterOperatorName, this.invalidArguments, this.constructor, this.constructorName);
        };
        return class_2;
    }(genericFilterMixin(Base)));
};

function createMatchesOrInFilter(operand) {
    if (looksLikeAnInteger(operand)) {
        return ['$in', [operand, Number.parseInt(operand)]];
    } else {
        return [
            '$matches',
            {
                ignoreCase: true,
                spec: createMatchSpec(operand),
            },
        ];
    }

    function looksLikeAnInteger(str) {
        return /^-?[0-9]{1,16}$/.test(str);
    }
}

function createMatchSpec(fieldValue) {
    var literals = fieldValue.split('-');
    var result = [];
    for (var i = 0; i < literals.length - 1; i++) {
        appendLiteralSegment(result, literals[i]);
        appendAnyOfSegment(result);
    }
    appendLiteralSegment(result, literals[literals.length - 1]);
    return result;

    function appendLiteralSegment(res, literalValue) {
        if (literalValue.length !== 0) {
            res.push({
                type: 'literal',
                value: literalValue
            });
        }
    }

    function appendAnyOfSegment(res) {
        res.push({
            type: 'anyOf',
            value: ' \t\n-'
        });
    }
}
var FilterValidator = (function(_super) {
    __extends(FilterValidator, _super);

    function FilterValidator(operatorName, previousInvalidArguments, ctor, constructorName) {
        var _this = _super.call(this, previousInvalidArguments) || this;
        _this.operatorName = operatorName;
        _this.ctor = ctor;
        _this.constructorName = constructorName;
        return _this;
    }
    FilterValidator.prototype.typeIsString = function(value) {
        var _this = this;
        return this.addValidation(function() {
            return isString(value);
        }, function() {
            return messages.filterValidations.typeIsString(_this.operatorName, value);
        });
    };
    FilterValidator.prototype.typeIsStringNumberOrDate = function(value) {
        var _this = this;
        return this.addValidation(function() {
            return isDateStringOrNumber(value);
        }, function() {
            return messages.filterValidations.typeIsStringNumberOrDate(_this.operatorName, value);
        });
    };
    FilterValidator.prototype.sameType = function(first, second) {
        var _this = this;
        return this.addValidation(function() {
            return typeForDisplay(first) === typeForDisplay(second);
        }, function() {
            return messages.filterValidations.sameType(_this.operatorName, first, second);
        });
    };
    FilterValidator.prototype.typeIsStringNumberOrDateForAll = function(values) {
        var _this = this;
        return this.addValidation(function() {
            return values.every(isDateStringOrNumber);
        }, function() {
            return messages.filterValidations.typeIsStringNumberOrDateForAll(_this.operatorName);
        });
    };
    FilterValidator.prototype.validFieldName = function(field) {
        var _this = this;
        return this.addValidation(function() {
            return isString(field);
        }, function() {
            return messages.filterValidations.validFieldName(_this.operatorName, field);
        });
    };
    FilterValidator.prototype.isInstanceOfSameClass = function(obj) {
        var _this = this;
        return this.addValidation(function() {
            return obj instanceof _this.ctor;
        }, function() {
            return messages.filterValidations.isInstanceOfSameClass(_this.operatorName, _this.constructorName, obj);
        });
    };
    FilterValidator.prototype.isForCollection = function(otherFilterBuilder, expectedCollectionName) {
        var _this = this;
        return this.addValidation(function() {
            return otherFilterBuilder.collectionName === expectedCollectionName;
        }, function() {
            return messages.filterValidations.isForCollection(_this.operatorName, _this.constructorName, otherFilterBuilder.collectionName);
        });
    };
    return FilterValidator;
}(AggregatingValidator));
export {
    FilterValidator
};

function isDateStringOrNumber(value) {
    return isString(value) || isNumber(value) || isDate(value);
}

function withCollectionNameIfUnset(filter, name) {
    if (!filter || !filter.constructor) {
        return filter;
    }
    var collectionName = filter.collectionName ? filter.collectionName : name;
    return new filter.constructor(__assign(__assign({}, filter), {
        collectionName: collectionName
    }));
}
export default filterMixin;
//# sourceMappingURL=filterMixin.js.map