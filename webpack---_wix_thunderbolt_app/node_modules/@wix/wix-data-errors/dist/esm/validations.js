import {
    __extends
} from "tslib";
import {
    messages
} from './errors';
import {
    isString,
    isBoolean,
    isObject,
    isArray
} from '@wix/wix-data-utils';
import {
    RejectingValidator
} from './base-validator';
var ApiValidator = /** @class */ (function(_super) {
    __extends(ApiValidator, _super);

    function ApiValidator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApiValidator.prototype.arity = function(method, args, from, to) {
        return this.addValidation(function() {
            return args.length <= to && args.length >= from;
        }, function() {
            return messages.invalidArgumentLength(method, from, to, args.length);
        });
    };
    ApiValidator.prototype._isObject = function(item, collectionName) {
        return this.addValidation(function() {
            return isObject(item);
        }, function() {
            return messages.itemMustBeAnObject(item, collectionName);
        });
    };
    ApiValidator.prototype.item = function(item, collectionName, requireId) {
        return this._isObject(item, collectionName).addValidation(function() {
            return (item._id !== undefined ? isString(item._id) : !requireId);
        }, function() {
            return messages.updateItemInvalid();
        });
    };
    ApiValidator.prototype.items = function(items, collectionName) {
        return this.addValidation(function() {
            return isArray(items) &&
                items.every(function(item) {
                    return isObject(item) &&
                        (item._id === undefined || item._id === null || isString(item._id));
                });
        }, function() {
            return messages.itemsMustBeArrayOfObjects(collectionName);
        }).addValidation(function() {
            return items.length <= 1000;
        }, function() {
            return messages.itemsMustBeLessThanThousand(collectionName);
        });
    };
    ApiValidator.prototype.fieldName = function(fieldName) {
        return this.addValidation(function() {
            return isString(fieldName);
        }, function() {
            return messages.fieldNameMustBeAString();
        });
    };
    ApiValidator.prototype.itemId = function(itemId) {
        return this.addValidation(function() {
            return isString(itemId);
        }, function() {
            return messages.itemIdMustBeAString();
        });
    };
    ApiValidator.prototype.itemIds = function(itemIds, collectionName) {
        return this.addValidation(function() {
            return isArray(itemIds) && itemIds.every(function(itemId) {
                return isString(itemId);
            });
        }, function() {
            return messages.itemIdsMustBeArrayOfStrings();
        }).addValidation(function() {
            return itemIds.length <= 1000;
        }, function() {
            return messages.removeItemsMustBeLessThanThousand(collectionName);
        });
    };
    ApiValidator.prototype._options = function(options, flags) {
        return this.addValidation(function() {
            var validOptions = isObject(options) &&
                flags.every(function(flag) {
                    if (flag === 'language') {
                        return isNonEmptyStringIfDefined(options[flag]);
                    } else {
                        return isBooleanIfDefined(options[flag]);
                    }
                });
            return options == null || validOptions;
        }, function() {
            return messages.optionsInvalid(flags);
        });
    };
    ApiValidator.prototype.referenceRemoveParameters = function(parameters) {
        return this.addValidation(function() {
            return isArray(parameters) && parameters.every(isRemoveReferenceParameter);
        }, messages.referenceOperationParameterError);
    };
    ApiValidator.prototype.referenceParameters = function(parameters) {
        return this.addValidation(function() {
            return isArray(parameters) && parameters.every(isReferenceParameter);
        }, messages.referenceOperationParameterError);
    };
    ApiValidator.prototype.referenceParameter = function(parameter) {
        return this.addValidation(function() {
            return isReferenceParameter(parameter);
        }, messages.referenceOperationParameterError);
    };
    ApiValidator.prototype.isNonEmptyString = function(operand, operandName) {
        return this.addValidation(function() {
            return typeof operand === 'string' && operand.length > 0;
        }, function() {
            return messages.queryValidations.isNonEmptyString(operandName);
        });
    };
    ApiValidator.prototype.references = function(refs) {
        return this.addValidation(function() {
            return isArray(refs) &&
                refs.every(function(ref) {
                    return isString(ref.relationshipName) &&
                        isReferenceParameter(ref.left) &&
                        isReferenceParameter(ref.right);
                });
        }, messages.invalidReferenceError);
    };
    ApiValidator.prototype.options = function(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'showDrafts',
            'consistentRead',
            'language',
        ]);
    };
    ApiValidator.prototype.bulkInsertOptions = function(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'overrideExisting',
        ]);
    };
    ApiValidator.prototype.bulkUpdateOptions = function(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'showDrafts',
        ]);
    };
    ApiValidator.prototype.bulkRemoveOptions = function(options) {
        return this._options(options, [
            'suppressAuth',
            'suppressHooks',
            'showDrafts',
        ]);
    };
    ApiValidator.prototype.truncateOptions = function(options) {
        return this._options(options, ['suppressAuth']);
    };
    ApiValidator.prototype.collectionName = function(collectionName) {
        return this.addValidation(function() {
            return isString(collectionName);
        }, function() {
            return messages.collectionNameMustBeAString();
        });
    };
    return ApiValidator;
}(RejectingValidator));
export function apiValidator() {
    return new ApiValidator();
}

function isNonEmptyStringIfDefined(value) {
    return value == null || (isString(value) && value.length > 0);
}

function isBooleanIfDefined(value) {
    return value == null || isBoolean(value);
}

function isReferenceParameter(parameter) {
    return ((isString(parameter) && parameter !== '') ||
        (isObject(parameter) && parameter.hasOwnProperty('_id')));
}

function isRemoveReferenceParameter(parameter) {
    return (isString(parameter) ||
        (isObject(parameter) && parameter.hasOwnProperty('_id')));
}
//# sourceMappingURL=validations.js.map