import {
    maybeGetGlobal
} from '../globals';
const IGNORE_KEYS = ['consentPolicy', 'consentPolicyHeader'];
const COMMON_CONFIG_NAME = 'commonConfig';
const MAP_KEYS = {
    bsi: 'BSI',
};

function extractCommonConfigValues() {
    const globalObj = maybeGetGlobal();
    const commonConfigObj = globalObj === null || globalObj === void 0 ? void 0 : globalObj.commonConfig;
    if (!commonConfigObj) {
        return null;
    }
    const res = {};
    let addedKeys = false;
    Object.keys(commonConfigObj).forEach((key) => {
        // @ts-expect-error
        const newKey = MAP_KEYS[key];
        if (newKey) {
            res[newKey] = commonConfigObj[key];
            addedKeys = true;
        } else if (IGNORE_KEYS.indexOf(key) < 0 &&
            typeof commonConfigObj[key] !== 'function') {
            res[key] = commonConfigObj[key];
            addedKeys = true;
        }
    });
    return addedKeys ? res : null;
}
export const commonConfig = () => {
    const commonConfigValues = extractCommonConfigValues();
    const value = commonConfigValues ? JSON.stringify(commonConfigValues) : '';
    return {
        [COMMON_CONFIG_NAME]: encodeURIComponent(value)
    };
};
//# sourceMappingURL=common-config.js.map