const FetchError = 100;
const NoComponentsAtHostBundle = 201;
const NoComponentsAtComponentBundle = 202;
const NoRegistryOverrideForHost = 301;
const Unknown = -1;
export const RegistryErrorCode = {
    FetchError,
    NoComponentsAtHostBundle,
    NoComponentsAtComponentBundle,
    Unknown,
    NoRegistryOverrideForHost,
};
/**
 * NOTE: all error methods should be defined as the arrow functions
 * because of typescript issue when target is set `es5`
 */
export class RegistryError extends Error {
    constructor(message, code = Unknown, extraParams) {
        const stack = [`Registry Error - "${code}"`, message];
        super(stack.filter(m => !!m).join('\n'));
        this.extraParams = extraParams;
        this.name = this.constructor.name;
        this.extraParams = extraParams;
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, RegistryError);
        }
    }
}
export const createException = (code, message = '', extraParams) => {
    const e = new RegistryError(message, code, extraParams);
    if (Error.captureStackTrace) {
        Error.captureStackTrace(e, createException);
    }
    return e;
};
//# sourceMappingURL=createException.js.map