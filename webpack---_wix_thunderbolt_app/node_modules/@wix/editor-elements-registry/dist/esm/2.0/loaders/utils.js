import {
    isBrowserMainThread
} from '../utils';
export function createPromiseGuard() {
    const requests = new Map();
    return async (id, {
        factory,
        persistent = true,
    }) => {
        if (requests.has(id)) {
            return requests.get(id);
        }
        const pending = factory();
        requests.set(id, pending);
        try {
            const model = await pending;
            if (!persistent) {
                requests.delete(id);
            }
            return model;
        } catch (e) {
            if (requests.has(id)) {
                requests.delete(id);
            }
            throw e;
        }
    };
}
export function withRetry({
    times,
    task,
}) {
    let counter = 0;
    return new Promise((resolve, reject) => {
        const run = async () => {
            try {
                const response = await task();
                resolve(response);
            } catch (e) {
                counter++;
                if (counter >= times) {
                    reject(e);
                } else {
                    await run();
                }
            }
        };
        void run();
    });
}
export function getScriptTag(url) {
    if (!isBrowserMainThread()) {
        return null;
    }
    const element = document.querySelector(`script[src="${url}"]`);
    return element;
}
//# sourceMappingURL=utils.js.map