import {
    HttpClientFetchError,
    UnexpectedHttpClientError
} from '../index';
import {
    isAxiosStyleError
} from '../helper/httpHelper';
import {
    DateTimeProvider
} from '../helper/timeProvider';
export var HttpClientAdapter = function(httpClient, moduleMetricsReporter, logger, timeProvider) {
    if (timeProvider === void 0) {
        timeProvider = DateTimeProvider();
    }
    var reject = function(msg, err) {
        return Promise.reject(new HttpClientFetchError(msg, err));
    };
    var getHttpResponse = function(httpHandler) {
        logger.info('SAC request info', {
            url: httpHandler.requestUrl,
            init: httpHandler.requestInit
        });
        return httpClient.fetch(httpHandler.requestUrl, httpHandler.requestInit)
            .then(httpHandler.transformResponse);
    };
    var logResponseInfo = function(httpResponse, duration) {
        var _a = httpResponse.rawHttpResponse,
            headers = _a.headers,
            status = _a.status,
            statusText = _a.statusText,
            ok = _a.ok;
        logger.info('SAC response info', {
            headers: headers,
            status: status,
            statusText: statusText,
            ok: ok,
            duration: duration
        });
    };
    var call = function(httpHandler) {
        var start = timeProvider.now();
        try {
            return getHttpResponse(httpHandler)
                .catch(function(httpResponseError) {
                    if (isAxiosStyleError(httpResponseError)) {
                        return reject(httpHandler.rejectMessage(httpResponseError.response.status, httpResponseError.response.data));
                    }
                    return reject(httpResponseError.message, httpResponseError);
                })
                .then(function(httpResponse) {
                    if (!httpResponse.rawHttpResponse.ok) {
                        return httpHandler.extractErrorMessage(httpResponse).then(reject);
                    }
                    var duration = timeProvider.now() - start;
                    logResponseInfo(httpResponse, duration);
                    httpResponse.reportMetrics(moduleMetricsReporter, duration);
                    return httpResponse;
                });
        } catch (httpClientError) {
            return Promise.reject(new UnexpectedHttpClientError(httpClientError));
        }
    };
    return {
        call: call
    };
};