import {
    last
} from 'lodash';
export var CDN_HIT_HEADER = 'age';
export var INTERNAL_CACHE_HIT_HEADER = 'x-cache-status';
export var VIA_HEADER = 'via';
var INTERNAL_CACHE_NAME = 'ssrInternalCache';
var CDN_CACHE_NAME = 'cdn';
export var SiteAssetsServerHttpResponseBuilder = function() {
    var maybeInternalCacheHeaderValue = function(httpResponse) {
        return httpResponse.headers.get(INTERNAL_CACHE_HIT_HEADER);
    };
    var internalCacheHeaderValue = function(httpResponse) {
        return maybeInternalCacheHeaderValue(httpResponse) || 'MISS';
    };
    var isInternalCacheHit = function(httpResponse) {
        return internalCacheHeaderValue(httpResponse) == 'HIT';
    };
    var maybeCdnHeaderValue = function(httpResponse) {
        return httpResponse.headers.get(CDN_HIT_HEADER);
    };
    var maybeViaHeaderValue = function(httpResponse) {
        return httpResponse.headers.get(VIA_HEADER);
    };
    var cdnHeaderValue = function(httpResponse) {
        return parseInt(maybeCdnHeaderValue(httpResponse) || '0');
    };
    var isCdnHit = function(httpResponse) {
        return cdnHeaderValue(httpResponse) > 0;
    };
    var parseCdnProvider = function(httpResponse) {
        var via = maybeViaHeaderValue(httpResponse);
        var cdnProvider = (last(via === null || via === void 0 ? void 0 : via.split(',')) || '').toLowerCase();
        if (cdnProvider.includes('google'))
            return 'google';
        if (cdnProvider.includes('cloudfront'))
            return 'cloudfront';
        if (cdnProvider.includes('varnish'))
            return 'fastly';
        return 'unknown';
    };
    var isHitToString = function(isHit) {
        return isHit ? 'hit' : 'miss';
    };
    var getDurationMetricName = function(httpResponse) {
        var metricName = function(cacheName, isHit) {
            return "site-assets-server-request-".concat(cacheName, "-").concat(isHitToString(isHit));
        };
        if (maybeInternalCacheHeaderValue(httpResponse))
            return metricName(INTERNAL_CACHE_NAME, isInternalCacheHit(httpResponse));
        if (maybeCdnHeaderValue(httpResponse))
            return metricName(CDN_CACHE_NAME, isCdnHit(httpResponse));
    };
    var build = function(httpResponse) {
        var cdnHit = isCdnHit(httpResponse);
        var internalCacheHit = isInternalCacheHit(httpResponse);
        return ({
            isCdnHit: cdnHit,
            isInternalCacheHit: internalCacheHit,
            rawHttpResponse: httpResponse,
            reportMetrics: function(moduleMetricsReporter, durationMs) {
                var durationMetricName = getDurationMetricName(httpResponse);
                if (durationMetricName) {
                    moduleMetricsReporter.histogram(durationMetricName, durationMs);
                }
                if (internalCacheHit) {
                    moduleMetricsReporter.meter("".concat(INTERNAL_CACHE_NAME, "-hit"));
                } else if (cdnHit) {
                    var provider = parseCdnProvider(httpResponse);
                    moduleMetricsReporter.meter("".concat(CDN_CACHE_NAME, "-hit-").concat(provider));
                }
            }
        });
    };
    return {
        build: build
    };
};