import _defineProperty from "@babel/runtime/helpers/defineProperty";
import {
    bindPrototypeMethodsToSelf
} from '@wix/panorama-common/utils';
import {
    createGlobalConfig
} from '@wix/panorama-common/global-config';
import {
    defaults
} from './utils/general-utils';
import {
    PanoramaClientImpl
} from './panorama-client';
import {
    HooksManager
} from './plugins/hooks-manager';
import {
    BasePanoramaClient
} from './panorama-client-base';
import {
    Scope
} from './lib/scope';
class PanoramaClientFactoryImpl {
    constructor(options) {
        this.options = options;
        _defineProperty(this, "globalConfig", void 0);
        _defineProperty(this, "reporter", () => true);
        _defineProperty(this, "plugins", []);
        _defineProperty(this, "isMuted", false);
        bindPrototypeMethodsToSelf(this);
    }
    withGlobalConfig(globalConfig) {
        this.globalConfig = globalConfig;
        return this;
    }
    withReporter(reporter) {
        this.reporter = reporter;
        return this;
    }
    setMuted(isMuted) {
        this.isMuted = isMuted;
        return this;
    }
    use(plugin) {
        this.plugins.push(plugin);
        return this;
    }
    client(options) {
        var _this$globalConfig;
        if (options === void 0) {
            options = {};
        }
        const {
            pluginParams
        } = options;
        const globalConfig = (_this$globalConfig = this.globalConfig) != null ? _this$globalConfig : createGlobalConfig();
        const reporter = this.reporter;
        const hooksManager = new HooksManager();
        const baseParams = defaults(options.baseParams, this.options.baseParams);
        const data = new Scope(this.options.data).addDataScope(options.data);
        const pluginClientParams = pluginParams != null ? pluginParams : {};
        const baseClient = new BasePanoramaClient({
            baseParams,
            globalConfig: globalConfig,
            isMuted: () => this.isMuted,
            reporter,
            hooksManager,
            data
        });
        const client = new PanoramaClientImpl({
            baseClient,
            hooksManager
        });
        this.plugins.forEach(plugin => plugin({
            hooksManager,
            globalConfig,
            reporter,
            baseClient,
            baseParams,
            pluginParams: pluginClientParams
        }));
        return client;
    }
}
export const panoramaClient = function(options) {
    if (options === void 0) {
        options = {};
    }
    return new PanoramaClientFactoryImpl(options);
};
//# sourceMappingURL=panorama-client-factory.js.map