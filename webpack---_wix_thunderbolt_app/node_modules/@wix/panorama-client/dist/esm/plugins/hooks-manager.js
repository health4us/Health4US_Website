import _defineProperty from "@babel/runtime/helpers/defineProperty";
export let Hook = /*#__PURE__*/ function(Hook) {
    Hook[Hook["afterCreateClientForComponent"] = 0] = "afterCreateClientForComponent";
    Hook[Hook["beforeReport"] = 1] = "beforeReport";
    Hook[Hook["beforeReportTransactionStart"] = 2] = "beforeReportTransactionStart";
    Hook[Hook["afterReportTransactionStart"] = 3] = "afterReportTransactionStart";
    Hook[Hook["beforeReportTransactionFinish"] = 4] = "beforeReportTransactionFinish";
    Hook[Hook["afterReportTransactionFinish"] = 5] = "afterReportTransactionFinish";
    Hook[Hook["beforeReportError"] = 6] = "beforeReportError";
    Hook[Hook["afterReportError"] = 7] = "afterReportError";
    Hook[Hook["beforeAddBreadcrumb"] = 8] = "beforeAddBreadcrumb";
    Hook[Hook["afterAddBreadcrumb"] = 9] = "afterAddBreadcrumb";
    Hook[Hook["beforeReportLog"] = 10] = "beforeReportLog";
    Hook[Hook["afterReportLog"] = 11] = "afterReportLog";
    Hook[Hook["beforeUnhandledError"] = 12] = "beforeUnhandledError";
    return Hook;
}({});
export class HooksManager {
    constructor() {
        _defineProperty(this, "subscribers", {});
    }
    tap(hook, subscriber) {
        this.subscribers[hook] = this.subscribers[hook] || [];
        this.subscribers[hook].push(subscriber);
    }
    invoke(hook) {
        const subscribers = this.subscribers[hook];
        if (!subscribers) {
            return true;
        }
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }
        for (const subscriber of subscribers) {
            if (subscriber(...args) === false) {
                return false;
            }
        }
        return true;
    }
}
//# sourceMappingURL=hooks-manager.js.map