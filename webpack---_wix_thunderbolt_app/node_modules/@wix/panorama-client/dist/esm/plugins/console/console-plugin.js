import {
    Hook
} from '../hooks-manager';
import {
    LogLevel
} from '@wix/panorama-common-shared/types';
import {
    fullArtifactIdToArtifactId
} from '../../utils/artifact-utils';
const getWixStaticsVersionsCookieValue = () => {
    if (typeof document === 'undefined') {
        return null;
    }
    const cookie = document.cookie.split(';').map(c => c.trim()).find(c => c.startsWith('wixStaticsVersions='));
    return cookie ? cookie.split('=')[1].trim() : null;
};
const hasArtifactIdOverrideQueryParam = artifactId => {
    if (typeof window === 'undefined') {
        return false;
    }
    const queryParams = new URLSearchParams(window.location.search);
    const queryParamKeyPrefix = artifactId + "-override";
    return Array.from(queryParams.keys()).some(key => key.startsWith(queryParamKeyPrefix));
};
const messageFormatter = (artifactId, componentId, message, data) => {
    return ['%c%s %c%s %c%s %c%s %c%s', 'color: #D39874', 'Panorama logger:', 'color: #CAB6D3', "" + artifactId, 'color: #B3CAD8', "" + componentId, 'color: #A6C6DB', "" + message, 'color: #91C1A5', "" + JSON.stringify(data)];
};
const checkIsLocalMode = fullArtifactId => {
    const wixStaticCookieValue = getWixStaticsVersionsCookieValue();
    const artifactId = fullArtifactIdToArtifactId(fullArtifactId);
    return wixStaticCookieValue && wixStaticCookieValue.includes(artifactId) || hasArtifactIdOverrideQueryParam(artifactId);
};
export const consolePlugin = () => _ref => {
    let {
        hooksManager,
        baseParams: {
            fullArtifactId,
            componentId
        }
    } = _ref;
    const isLocalMode = checkIsLocalMode(fullArtifactId);
    hooksManager.tap(Hook.beforeReportLog, (logLevel, message, data) => {
        if (isLocalMode) {
            const formattedMessage = messageFormatter(fullArtifactId, componentId, message, data);
            if (logLevel === LogLevel.Info) {
                console.info(...formattedMessage);
            } else if (logLevel === LogLevel.Warn) {
                console.warn(...formattedMessage);
            } else if (logLevel === LogLevel.Error) {
                console.error(...formattedMessage);
            } else if (logLevel === LogLevel.Debug) {
                console.debug(...formattedMessage);
            }
        }
    });
};
//# sourceMappingURL=console-plugin.js.map