import {
    ExceptionType
} from '../../types';
import {
    extractWixHttpErrorDetails
} from '../../utils/error-utils';
import {
    getBreadcrumbs
} from './sentry-plugin-breadcrumbs';
import {
    PANORAMA_DATA_KEY
} from './sentry-plugin-constants';
export const attachPanoramaDataToSentryScope = (scope, data) => {
    scope.setContext(PANORAMA_DATA_KEY, {
        ...data,
        exceptionType: (data == null ? void 0 : data.exceptionType) || ExceptionType.HANDLED
    });
    if (data != null && data.severity) {
        scope.setLevel(data.severity);
    }
    return scope;
};
export const extractPanoramaDataFromSentryEvent = event => {
    var _event$contexts;
    let res = {};
    if ((_event$contexts = event.contexts) != null && _event$contexts[PANORAMA_DATA_KEY]) {
        res = {
            ...res,
            ...event.contexts[PANORAMA_DATA_KEY]
        };

        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete event.contexts[PANORAMA_DATA_KEY];
    }
    res.exceptionType = res.exceptionType || ExceptionType.UNHANDLED;
    return res;
};
export const enrichPanoramaDataWithSentryEventData = (data, event, _ref) => {
    var _data$environment;
    let {
        stackTraceArtifactsData
    } = _ref;
    return {
        ...data,
        externalId: event.event_id,
        environment: (_data$environment = data.environment) != null ? _data$environment : event.environment,
        stackTraceArtifacts: stackTraceArtifactsData
    };
};
export const enrichSentryEventWithPanoramaData = (event, data, baseClient) => {
    const dataWithDefaults = baseClient.getErrorMonitorDataWithDefaults({
        tags: {
            exceptionType: data.exceptionType
        }
    }, {
        tags: data.tags,
        context: data.context,
        environment: data.environment
    }, {
        tags: event.tags,
        context: event.contexts,
        environment: event.environment
    });
    event = {
        ...event,
        tags: dataWithDefaults == null ? void 0 : dataWithDefaults.tags,
        contexts: dataWithDefaults == null ? void 0 : dataWithDefaults.context,
        environment: dataWithDefaults == null ? void 0 : dataWithDefaults.environment
    };
    return event;
};
export const enrichSentryEventWithBreadcrumbs = (event, globalConfig) => {
    return {
        ...event,
        breadcrumbs: getBreadcrumbs(globalConfig)
    };
};
export const enrichSentryEventWithWixHttpErrorData = (event, error) => {
    const {
        requestId
    } = extractWixHttpErrorDetails(error);
    return {
        ...event,
        tags: {
            ...event.tags,
            ...(requestId ? {
                requestId
            } : {})
        }
    };
};
//# sourceMappingURL=sentry-plugin-enricher.js.map