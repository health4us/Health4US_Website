import {
    ExceptionType
} from '../../types';
import {
    RoutingAction,
    RoutingActionReason
} from './sentry-plugin-types';
import {
    getFirstMatchingHub,
    isScriptTypeBlacklisted
} from './sentry-plugin-utils';
import {
    isArtifactMismatch,
    isSameArtifact
} from '../../utils/artifact-utils';
export const getRoutingDecision = options => {
    const {
        artifactData,
        stackTraceArtifactsData,
        panoramaData,
        globalConfig
    } = options;
    const {
        exceptionType
    } = panoramaData;
    if (exceptionType === ExceptionType.HANDLED) {
        return {
            routingAction: RoutingAction.CONTINUE,
            routingActionReason: RoutingActionReason.ERROR_IS_HANDLED
        };
    }
    if (stackTraceArtifactsData.length === 0) {
        return {
            routingAction: RoutingAction.CONTINUE,
            routingActionReason: RoutingActionReason.NO_ARTIFACTS_IN_STACKTRACE
        };
    }
    if (isScriptTypeBlacklisted(stackTraceArtifactsData)) {
        return {
            routingAction: RoutingAction.DROP,
            routingActionReason: RoutingActionReason.BLACKLISTED_SCRIPT_TYPE
        };
    }
    if (!isArtifactMismatch(artifactData, stackTraceArtifactsData)) {
        return {
            routingAction: RoutingAction.CONTINUE,
            routingActionReason: RoutingActionReason.HANDLER_MATCH
        };
    }
    const result = getFirstMatchingHub(stackTraceArtifactsData, globalConfig);
    if (!result) {
        return {
            routingAction: RoutingAction.DROP,
            routingActionReason: RoutingActionReason.NO_REGISTERED_ARTIFACTS_IN_STACKTRACE
        };
    }
    const {
        hub,
        artifactData: matchedArtifactData
    } = result;
    if (isSameArtifact(artifactData, matchedArtifactData)) {
        return {
            routingAction: RoutingAction.CONTINUE,
            routingActionReason: RoutingActionReason.HANDLER_REROUTE_MATCH
        };
    }
    const routingActionReason = isSameArtifact(matchedArtifactData, stackTraceArtifactsData[0]) ? RoutingActionReason.EXACT_REROUTE_MATCH : RoutingActionReason.FALLBACK_REROUTE_MATCH;
    return {
        routingAction: RoutingAction.REROUTE,
        routingActionReason,
        targetHub: hub
    };
};
//# sourceMappingURL=sentry-plugin-router.js.map