import {
    RoutingAction
} from './sentry-plugin-types';
import {
    Hook
} from '../hooks-manager';
import {
    defaults
} from '../../utils/general-utils';
import {
    calculateEnvironment
} from '../../utils/environment-utils';
import {
    getArtifactDataFromBaseParams
} from '../../utils/artifact-utils';
import {
    normalizeError
} from '../../utils/error-utils';
import {
    buildReleaseString,
    setReleaseFromStackTraceArtifactsData,
    createSafePanoramaErrorReporter,
    isHubOKResult,
    isUnprocessedUnhandledError
} from './sentry-plugin-utils';
import {
    enrichBreadcrumbsWithDataHooks
} from './sentry-plugin-breadcrumbs';
import {
    getGlobalHub,
    getHubForDsn,
    getMainHub,
    setGlobalHub,
    setHubForArtifact,
    setHubForDsn,
    setMainHub
} from './sentry-plugin-state';
import {
    attachPanoramaDataToSentryScope,
    enrichPanoramaDataWithSentryEventData,
    enrichSentryEventWithBreadcrumbs,
    enrichSentryEventWithPanoramaData,
    enrichSentryEventWithWixHttpErrorData,
    extractPanoramaDataFromSentryEvent
} from './sentry-plugin-enricher';
import {
    getRoutingDecision
} from './sentry-plugin-router';
import {
    extractArtifactsDataFromSentryEvent
} from './sentry-plugin-stacktrace';
const createHub = options => {
    const {
        artifactData,
        pluginParams
    } = options;
    const {
        sentry,
        sentryTransport,
        sentryDsn,
        sentryEnvironment
    } = pluginParams;
    if (!sentry || !sentryDsn) {
        return {
            hub: null
        };
    }
    let sentryBeforeSendHook;
    const hub = new sentry.Hub(new sentry.BrowserClient({
        dsn: sentryDsn,
        environment: sentryEnvironment != null ? sentryEnvironment : calculateEnvironment(),
        release: buildReleaseString(artifactData),
        transport: sentryTransport,
        integrations: [...sentry.defaultIntegrations],
        normalizeDepth: 4,
        // Change the default nesting depth of (3) because we use one level of nesting when encoding the Panorama context
        beforeBreadcrumb: enrichBreadcrumbsWithDataHooks,
        beforeSend(event, hint) {
            return typeof sentryBeforeSendHook === 'function' ? sentryBeforeSendHook(event, hint) : event;
        }
    }));
    return {
        hub,
        sentryBeforeSend(handler) {
            sentryBeforeSendHook = handler;
        }
    };
};
const initHub = (hubResult, options) => {
    const {
        hub
    } = hubResult;
    const {
        artifactData,
        baseParams,
        pluginParams,
        globalConfig
    } = options;
    const {
        fullArtifactId,
        componentId,
        uuid,
        msid
    } = baseParams;
    const {
        sentry,
        sentryDsn,
        sentryMain
    } = pluginParams;
    const {
        artifactId
    } = artifactData;
    if (uuid) {
        hub.setUser({
            id: uuid
        });
    }
    hub.setTags({
        fullArtifactId,
        componentId,
        msid,
        sessionId: globalConfig.getSessionId()
    });
    if (!getMainHub(globalConfig) && sentryMain) {
        if (!getGlobalHub(globalConfig)) {
            const globalHub = sentry.getCurrentHub();
            if (globalHub.getClient()) {
                setGlobalHub(globalHub, globalConfig);
            }
        }
        sentry.makeMain(hub);
        setMainHub(hub, globalConfig);
    }
    setHubForArtifact(hub, artifactId, globalConfig);
    setHubForDsn(hub, sentryDsn, globalConfig);
};
const initHooks = (hubResult, options) => {
    const {
        artifactData,
        pluginParams,
        baseClient,
        globalConfig,
        hooksManager
    } = options;
    const {
        sentryBeforeSend
    } = hubResult;
    const reportErrorToPanoramaSafely = createSafePanoramaErrorReporter(baseClient);

    // Subscribe to Sentry error reports
    sentryBeforeSend((event, hint) => {
        const error = normalizeError(event, hint == null ? void 0 : hint.originalException);
        if (isUnprocessedUnhandledError(event) && !hooksManager.invoke(Hook.beforeUnhandledError, error)) {
            return null;
        }
        const stackTraceArtifactsData = extractArtifactsDataFromSentryEvent(event, hint);
        let panoramaData = extractPanoramaDataFromSentryEvent(event);
        const {
            routingAction: prevRoutingAction
        } = panoramaData;
        let reportToPanorama = false;
        let reportToSentry = false;
        if (prevRoutingAction === RoutingAction.REROUTE) {
            reportToPanorama = true;
            reportToSentry = true;
        } else {
            const {
                routingAction,
                routingActionReason,
                targetHub
            } = getRoutingDecision({
                artifactData,
                stackTraceArtifactsData,
                panoramaData,
                globalConfig
            });
            panoramaData = {
                ...panoramaData,
                routingAction,
                routingActionReason
            };
            switch (routingAction) {
                case RoutingAction.REROUTE:
                    reportToPanorama = false;
                    reportToSentry = false;

                    // Report the error to Sentry using the correct Hub
                    targetHub.withScope(scope => {
                        attachPanoramaDataToSentryScope(scope, {
                            ...panoramaData,
                            originalHandler: artifactData
                        });
                        targetHub.captureException(error);
                    });
                    break;
                case RoutingAction.CONTINUE:
                    reportToPanorama = true;
                    reportToSentry = true;
                    break;
                case RoutingAction.DROP:
                    reportToPanorama = true;
                    reportToSentry = false;
                    break;
            }
        }
        if (reportToPanorama) {
            panoramaData = enrichPanoramaDataWithSentryEventData(panoramaData, event, {
                stackTraceArtifactsData
            });
            reportErrorToPanoramaSafely(error, panoramaData);
        }
        if (reportToSentry) {
            if (pluginParams.sentryGetReleaseFromStacktrace) {
                event = setReleaseFromStackTraceArtifactsData(event, artifactData, stackTraceArtifactsData);
            }
            event = enrichSentryEventWithBreadcrumbs(event, globalConfig);
            event = enrichSentryEventWithPanoramaData(event, panoramaData, baseClient);
            event = enrichSentryEventWithWixHttpErrorData(event, error);
            return event;
        }
        return null;
    });

    // Subscribe to Panorama error reports
    hooksManager.tap(Hook.beforeReportError, (error, data, errorMonitorOptions) => {
        var _errorMonitorOptions$;
        if (data != null && data.externalId) {
            // This error already went through Sentry's "beforeSend", just report it to Panorama by returning void
            return;
        }
        let sentryHub = hubResult.hub;
        const {
            sentryLookupDsn,
            sentryEnvironment
        } = (_errorMonitorOptions$ = errorMonitorOptions == null ? void 0 : errorMonitorOptions.pluginParams) != null ? _errorMonitorOptions$ : {};

        // If a lookup DSN is provided try to get its matching Hub
        if (sentryLookupDsn) {
            const hub = getHubForDsn(sentryLookupDsn, globalConfig);
            if (hub) {
                sentryHub = hub;
            }
        }

        // Report the error to Sentry
        sentryHub.withScope(scope => {
            attachPanoramaDataToSentryScope(scope, defaults(data, {
                environment: sentryEnvironment
            }));
            sentryHub.captureException(error);
        });

        // Don't report the error to Panorama yet by returning false
        return false;
    });
    hooksManager.tap(Hook.beforeAddBreadcrumb, breadcrumb => {
        var _getGlobalHub;
        const hub = (_getGlobalHub = getGlobalHub(globalConfig)) != null ? _getGlobalHub : getMainHub(globalConfig);
        hub == null || hub.addBreadcrumb(breadcrumb);
    });
};
export const sentryPlugin = function(pluginFactoryParams) {
    if (pluginFactoryParams === void 0) {
        pluginFactoryParams = {};
    }
    return _ref => {
        let {
            baseParams,
            pluginParams,
            baseClient,
            hooksManager,
            globalConfig
        } = _ref;
        pluginParams = defaults(pluginParams, pluginFactoryParams);
        const artifactData = getArtifactDataFromBaseParams(baseParams);
        const hubResult = createHub({
            artifactData,
            pluginParams
        });
        if (!isHubOKResult(hubResult)) {
            return;
        }
        initHub(hubResult, {
            artifactData,
            baseParams,
            pluginParams: pluginParams,
            globalConfig
        });
        initHooks(hubResult, {
            artifactData,
            pluginParams: pluginParams,
            baseClient,
            hooksManager,
            globalConfig
        });
    };
};
//# sourceMappingURL=sentry-plugin.js.map