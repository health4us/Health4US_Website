import {
    LogLevel
} from '@wix/panorama-common-shared/types';
import {
    BlacklistedStacktraceScriptTypes,
    PANORAMA_DATA_KEY
} from './sentry-plugin-constants';
import {
    getHubForArtifact
} from './sentry-plugin-state';
import {
    getFirstMatchingArtifact
} from '../../utils/artifact-utils';

/**
 * Safe Panorama logger to be used within Sentry's "beforeSend" hook so we don't trigger report loops if the call fails
 */
export const createSafePanoramaLogger = baseClient => (logLevel, message, data) => {
    try {
        baseClient.log(logLevel, message, data);
    } catch (e) {}
};

/**
 * Safe Panorama error reporter to be used within Sentry's "beforeSend" hook so we don't trigger report loops if the call fails
 */
export const createSafePanoramaErrorReporter = baseClient => (error, panoramaData) => {
    if (!(error instanceof Error)) {
        return;
    }
    try {
        baseClient.reportError(error, panoramaData);
    } catch (e) {
        // Log to Panorama if the above call threw an exception
        createSafePanoramaLogger(baseClient)(LogLevel.Error, '[panorama-sentry-plugin] Failed to report error to Panorama', {
            ...panoramaData,
            error: e == null ? void 0 : e.toString()
        });
    }
};
export const isHubOKResult = hubResult => !!hubResult.hub;
export const isUnprocessedUnhandledError = event => {
    var _event$contexts;
    return !((_event$contexts = event.contexts) != null && _event$contexts[PANORAMA_DATA_KEY]);
};
export const isScriptTypeBlacklisted = stackTraceArtifactsData => stackTraceArtifactsData.some(_ref => {
    let {
        scriptType
    } = _ref;
    return BlacklistedStacktraceScriptTypes.includes(scriptType);
});
export const buildReleaseString = artifactData => {
    const {
        artifactId,
        artifactVersion
    } = artifactData;
    return artifactId + "@" + artifactVersion;
};
export const setReleaseFromStackTraceArtifactsData = (event, currentArtifactData, stackTraceArtifactsData) => {
    const artifact = getFirstMatchingArtifact(currentArtifactData, stackTraceArtifactsData);
    if (!artifact) {
        return event;
    }
    const release = buildReleaseString(artifact);
    return {
        ...event,
        release
    };
};
export const getFirstMatchingHub = (stackTraceArtifactsData, globalConfig) => {
    for (const stackTraceArtifactData of stackTraceArtifactsData) {
        const hub = getHubForArtifact(stackTraceArtifactData.artifactId, globalConfig);
        if (hub) {
            return {
                hub,
                artifactData: stackTraceArtifactData
            };
        }
    }
    return null;
};
//# sourceMappingURL=sentry-plugin-utils.js.map