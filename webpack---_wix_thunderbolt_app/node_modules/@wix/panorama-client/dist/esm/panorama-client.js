import _defineProperty from "@babel/runtime/helpers/defineProperty";
import {
    bindPrototypeMethodsToSelf
} from '@wix/panorama-common/utils';
import {
    InternalTransactions
} from '@wix/panorama-common-shared/types';
import {
    PanoramaClientForComponentImpl
} from './panorama-client-component';
import {
    Hook
} from './plugins/hooks-manager';
import {
    PanoramaErrorMonitorImpl
} from './panorama-error-monitor';
import {
    PanoramaLoggerImpl
} from './panorama-logger';
export class PanoramaClientImpl {
    constructor(_ref) {
        let {
            hooksManager,
            baseClient
        } = _ref;
        _defineProperty(this, "baseClient", void 0);
        _defineProperty(this, "hooksManager", void 0);
        this.baseClient = baseClient;
        this.hooksManager = hooksManager;
        bindPrototypeMethodsToSelf(this);
    }
    onUnhandledError(subscriber) {
        this.hooksManager.tap(Hook.beforeUnhandledError, subscriber);
    }
    reportLoadStart(data) {
        const {
            ComponentLoad
        } = InternalTransactions;
        return this.baseClient.reportTransactionStart(ComponentLoad, data);
    }
    reportLoadFinish(data) {
        const {
            ComponentLoad
        } = InternalTransactions;
        return this.baseClient.reportTransactionFinish(ComponentLoad, data);
    }
    errorMonitor(options) {
        return new PanoramaErrorMonitorImpl(this.baseClient, options);
    }
    logger() {
        return new PanoramaLoggerImpl(this.baseClient);
    }
    createClientForComponent() {
        const client = new PanoramaClientForComponentImpl({
            baseClient: this.baseClient
        });
        this.hooksManager.invoke(Hook.afterCreateClientForComponent, client);
        return client;
    }
}
//# sourceMappingURL=panorama-client.js.map