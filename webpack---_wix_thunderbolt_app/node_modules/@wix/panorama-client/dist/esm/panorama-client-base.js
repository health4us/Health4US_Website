import _defineProperty from "@babel/runtime/helpers/defineProperty";
// import type { IHttpError } from '@wix/http-client';

import {
    TransactionAction
} from '@wix/panorama-common-shared/types';
import {
    createDurationTracker
} from '@wix/panorama-common/duration-tracker';
import {
    buildErrorPayload,
    buildLoggerPayload,
    buildTransactionPayload
} from './lib/payload-builder';
import {
    Hook
} from './plugins/hooks-manager';
export class BasePanoramaClient {
    constructor(_ref) {
        var _this = this;
        let {
            baseParams,
            globalConfig,
            reporter,
            hooksManager,
            data,
            isMuted
        } = _ref;
        _defineProperty(this, "durationTracker", void 0);
        _defineProperty(this, "baseParams", void 0);
        _defineProperty(this, "globalConfig", void 0);
        _defineProperty(this, "reporter", void 0);
        _defineProperty(this, "hooksManager", void 0);
        _defineProperty(this, "data", void 0);
        _defineProperty(this, "isMuted", void 0);
        _defineProperty(this, "getErrorMonitorDataWithDefaults", function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            return _this.data.addDataScope(args).getData();
        });
        this.baseParams = baseParams;
        this.globalConfig = globalConfig;
        this.reporter = reporter;
        this.hooksManager = hooksManager;
        this.data = data;
        this.isMuted = isMuted;

        // For backward compatibility in cases where GlobalConfig version is older than what we expect
        this.durationTracker = typeof globalConfig.getDurationTracker === 'function' ? globalConfig.getDurationTracker() : createDurationTracker();
    }
    report(eventPayload) {
        if (this.isMuted()) {
            return;
        }
        const reporterOverride = this.globalConfig.getReporter();
        if (typeof reporterOverride === 'function') {
            reporterOverride(eventPayload);
            return;
        }
        if (!this.hooksManager.invoke(Hook.beforeReport, eventPayload)) {
            return;
        }
        this.reporter(eventPayload);
    }
    reportTransactionStart(name, data) {
        const dataWithDefault = this.data.addDataScope(data).getData();
        if (!this.hooksManager.invoke(Hook.beforeReportTransactionStart, name, dataWithDefault)) {
            return;
        }
        const {
            fullArtifactId,
            componentId
        } = this.baseParams;
        this.durationTracker.markTransactionStart(fullArtifactId, componentId, name);
        const payload = buildTransactionPayload(this.globalConfig, this.baseParams, {
            transactionName: name,
            transactionAction: TransactionAction.Start
        }, dataWithDefault);
        this.report(payload);
        this.hooksManager.invoke(Hook.afterReportTransactionStart, name, payload);
    }
    reportTransactionFinish(name, data) {
        const dataWithDefault = this.data.addDataScope(data).getData();
        if (!this.hooksManager.invoke(Hook.beforeReportTransactionFinish, name, dataWithDefault)) {
            return;
        }
        const {
            fullArtifactId,
            componentId
        } = this.baseParams;
        const duration = this.durationTracker.markTransactionFinish(fullArtifactId, componentId, name);
        const payload = buildTransactionPayload(this.globalConfig, this.baseParams, {
            transactionName: name,
            transactionAction: TransactionAction.Finish,
            transactionDuration: duration
        }, dataWithDefault);
        this.report(payload);
        this.hooksManager.invoke(Hook.afterReportTransactionFinish, name, payload);
    }
    reportError(error, data, options) {
        if (!(error instanceof Error)) {
            return;
        }
        data = this.data.addDataScope([data, options == null ? void 0 : options.data]).getData();
        if (!this.hooksManager.invoke(Hook.beforeReportError, error, data, options)) {
            return;
        }
        const payload = buildErrorPayload(this.globalConfig, this.baseParams, error, data);
        this.report(payload);
        this.hooksManager.invoke(Hook.afterReportError, error, data, options);
    }
    addBreadcrumb(breadcrumb) {
        if (!this.hooksManager.invoke(Hook.beforeAddBreadcrumb, breadcrumb)) {
            return;
        }

        // Currently the default implementation does nothing, we only invoke hooks

        this.hooksManager.invoke(Hook.afterAddBreadcrumb, breadcrumb);
    }
    log(logLevel, message, data) {
        if (!message) {
            return;
        }
        const dataWithDefault = this.data.addDataScope(data).getData();
        const loggerParams = {
            message,
            data: dataWithDefault,
            logLevel
        };
        if (!this.hooksManager.invoke(Hook.beforeReportLog, logLevel, message, dataWithDefault)) {
            return;
        }
        const payload = buildLoggerPayload(this.globalConfig, this.baseParams, loggerParams);
        this.report(payload);
        this.hooksManager.invoke(Hook.afterReportLog, logLevel, message, dataWithDefault);
    }
}
//# sourceMappingURL=panorama-client-base.js.map