import {
    __assign,
    __extends
} from "tslib";
import {
    clone,
    isString
} from '@wix/wix-data-utils';
import {
    AggregatingValidator,
    messages,
    validationError,
} from '@wix/wix-data-errors';
export var groupMixin = function(Base) {
    if (Base === void 0) {
        Base = /** @class */ (function() {
            function class_1() {}
            return class_1;
        }());
    }
    return /** @class */ (function(_super) {
        __extends(class_2, _super);

        function class_2(obj) {
            if (obj === void 0) {
                obj = {};
            }
            var _this = _super.call(this, obj) || this;
            _this.groupByTree = obj.groupByTree;
            _this.invalidArguments = obj.invalidArguments || [];
            return _this;
        }
        class_2.prototype.sum = function(fieldName, projectedField) {
            var newInvalidArguments = this._groupValidator('.sum')
                .arityIsAtLeastOne(arguments)
                .typeIsString(fieldName)
                .validateAndAggregate()[0];
            return this._addAccumulator('sum', fieldName, projectedField, newInvalidArguments);
        };
        class_2.prototype.avg = function(fieldName, projectedField) {
            var newInvalidArguments = this._groupValidator('.avg')
                .arityIsAtLeastOne(arguments)
                .typeIsString(fieldName)
                .validateAndAggregate()[0];
            return this._addAccumulator('avg', fieldName, projectedField, newInvalidArguments);
        };
        class_2.prototype.min = function(fieldName, projectedField) {
            var newInvalidArguments = this._groupValidator('.min')
                .arityIsAtLeastOne(arguments)
                .typeIsString(fieldName)
                .validateAndAggregate()[0];
            return this._addAccumulator('min', fieldName, projectedField, newInvalidArguments);
        };
        class_2.prototype.max = function(fieldName, projectedField) {
            var newInvalidArguments = this._groupValidator('.max')
                .arityIsAtLeastOne(arguments)
                .typeIsString(fieldName)
                .validateAndAggregate()[0];
            return this._addAccumulator('max', fieldName, projectedField, newInvalidArguments);
        };
        class_2.prototype.count = function() {
            var newInvalidArguments = this._groupValidator('.count')
                .arityIsZero(arguments)
                .validateAndAggregate()[0];
            var groupByTree = clone(this.groupByTree) || {
                _id: formId()
            };
            var accFieldName = 'count';
            var accumulator = {
                $sum: 1
            };
            groupByTree[accFieldName] = accumulator;
            return this._copy(groupByTree, newInvalidArguments);
        };
        class_2.prototype._addAccumulator = function(acc, fieldName, projectedField, newInvalidArguments) {
            var groupByTree = clone(this.groupByTree) || {
                _id: formId()
            };
            var accFieldName = projectedField || fieldName + capitalize(acc);
            var accumulator = {};
            accumulator["$".concat(acc)] = "$".concat(fieldName);
            groupByTree[accFieldName] = accumulator;
            return this._copy(groupByTree, newInvalidArguments);
        };
        class_2.prototype._copy = function(groupByTree, invalidArguments) {
            return new this.constructor(__assign(__assign({}, this), {
                groupByTree: groupByTree,
                invalidArguments: invalidArguments
            }));
        };
        class_2.prototype._groupValidator = function(operatorName) {
            return new GroupValidator(operatorName, this.invalidArguments);
        };
        return class_2;
    }(Base));
};
var WixDataGroupBuilder = /** @class */ (function(_super) {
    __extends(WixDataGroupBuilder, _super);

    function WixDataGroupBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WixDataGroupBuilder.prototype._build = function() {
        throwErrorIfInvalid(this.invalidArguments);
        return this.groupByTree;
    };
    return WixDataGroupBuilder;
}(groupMixin()));
export {
    WixDataGroupBuilder
};

function throwErrorIfInvalid(invalidArguments) {
    if (invalidArguments.length > 0) {
        throw validationError(messages.groupBuilderInvalid(invalidArguments));
    }
}
var GroupValidator = /** @class */ (function(_super) {
    __extends(GroupValidator, _super);

    function GroupValidator(operatorName, previousInvalidArguments) {
        var _this = _super.call(this, previousInvalidArguments) || this;
        _this.operatorName = operatorName;
        return _this;
    }
    GroupValidator.prototype.typeIsString = function(value) {
        var _this = this;
        return this.addValidation(function() {
            return isString(value);
        }, function() {
            return messages.filterValidations.typeIsString(_this.operatorName, value);
        });
    };
    return GroupValidator;
}(AggregatingValidator));

function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
export function groupFactory() {
    var fieldName = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fieldName[_i] = arguments[_i];
    }
    var idField = formId.apply(void 0, fieldName);
    return groupWithId(idField);
}
export function formId() {
    var fieldName = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fieldName[_i] = arguments[_i];
    }
    if (fieldName.length === 1) {
        return "$".concat(fieldName);
    } else if (fieldName.length > 1) {
        var _id_1 = {};
        fieldName.forEach(function(field) {
            return (_id_1[field] = "$".concat(field));
        });
        return _id_1;
    } else {
        return '0';
    }
}

function groupWithId(_id) {
    return new WixDataGroupBuilder({
        groupByTree: {
            _id: _id
        }
    });
}
//# sourceMappingURL=group.js.map