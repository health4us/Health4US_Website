import {
    __assign,
    __extends,
    __spreadArray
} from "tslib";
import sortMixin from './sort/sortMixin';
import {
    AggregatingValidator,
    messages,
    validationError,
    apiValidator,
} from '@wix/wix-data-errors';
import {
    groupMixin,
    formId
} from './group';
import {
    clone,
    isNumber,
    isObject,
    isString
} from '@wix/wix-data-utils';
import {
    isCursorDefined
} from './paging/cursors';
import {
    calcSkipNumber
} from './utils/skip-calculator';
var WixDataAggregate = /** @class */ (function(_super) {
    __extends(WixDataAggregate, _super);

    function WixDataAggregate(obj) {
        if (obj === void 0) {
            obj = {};
        }
        var _this = _super.call(this, obj) || this;
        _this.provider = obj.provider;
        _this.collectionName = obj.collectionName;
        _this.filterTree = obj.filterTree;
        _this.havingTree = obj.havingTree;
        _this.skipNumber = obj.skipNumber || 0;
        _this.limitNumber = obj.limitNumber;
        _this.cursor = obj.cursor;
        _this.invalidArguments = obj.invalidArguments || [];
        return _this;
    }
    WixDataAggregate.prototype.filter = function(filter) {
        var newInvalidArguments = this._aggregateValidator('.filter')
            .arityIsOne(arguments)
            .filterIsNotSet(this)
            .filterBuilder(filter)
            .validateAndAggregate()[0];
        return new WixDataAggregate({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: filter.filterTree,
            groupByTree: this.groupByTree,
            havingTree: this.havingTree,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            cursor: this.cursor,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments.concat(filter.invalidArguments),
        });
    };
    WixDataAggregate.prototype.group = function() {
        var fieldName = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fieldName[_i] = arguments[_i];
        }
        var groupByTree = clone(this.groupByTree);
        var newInvalidArguments = this._aggregateValidator('.group')
            .arityIsAtLeastOne(arguments)
            .groupIsNotSet(groupByTree)
            .validateAndAggregate()[0];
        if (!groupByTree) {
            groupByTree = {
                _id: formId.apply(void 0, fieldName)
            };
        } else if (groupByTree._id === '0') {
            groupByTree = __assign(__assign({}, groupByTree), {
                _id: formId.apply(void 0, fieldName)
            });
        }
        return new WixDataAggregate({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            groupByTree: groupByTree,
            havingTree: this.havingTree,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            cursor: this.cursor,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments,
        });
    };
    WixDataAggregate.prototype.having = function(filter) {
        var newInvalidArguments = this._aggregateValidator('.having')
            .arityIsOne(arguments)
            .havingIsNotSet(this)
            .filterBuilder(filter)
            .validateAndAggregate()[0];
        return new WixDataAggregate({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            groupByTree: this.groupByTree,
            havingTree: filter.filterTree,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            cursor: this.cursor,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments.concat(filter.invalidArguments),
        });
    };
    WixDataAggregate.prototype.skip = function(skipNumber) {
        var newInvalidArguments = this._aggregateValidator('.skip')
            .arityIsOne(arguments)
            .isNonNegativeNumber(skipNumber)
            .isInteger(skipNumber)
            .validateAndAggregate()[0];
        return new WixDataAggregate({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            groupByTree: this.groupByTree,
            havingTree: this.havingTree,
            skipNumber: skipNumber,
            limitNumber: this.limitNumber,
            cursor: this.cursor,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments,
        });
    };
    WixDataAggregate.prototype.limit = function(limitNumber) {
        var newInvalidArguments = this._aggregateValidator('.limit')
            .arityIsOne(arguments)
            .isPositiveNumber(limitNumber)
            .isInteger(limitNumber)
            .validateAndAggregate()[0];
        return new WixDataAggregate({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            groupByTree: this.groupByTree,
            havingTree: this.havingTree,
            skipNumber: this.skipNumber,
            limitNumber: limitNumber,
            cursor: this.cursor,
            orderBy: this.orderBy,
            invalidArguments: newInvalidArguments,
        });
    };
    WixDataAggregate.prototype.run = function(options) {
        var _this = this;
        var self = this;
        var pipeline = this._buildPipeline();
        return rejectIfInvalid(this.invalidArguments, this.collectionName)
            .then(function() {
                return apiValidator().options(options).validateAndReject();
            })
            .then(function() {
                return _this.provider.runAggregate(_this.collectionName, pipeline, _this.limitNumber, options, _this.cursor);
            })
            .then(function(_a) {
                var items = _a.items,
                    hasNext = _a.hasNext,
                    cursors = _a.cursors;
                return new WixDataAggregateResult({
                    items: items,
                    hasNext: hasNext,
                    aggregate: self,
                    pageSize: items.length,
                    cursors: cursors,
                    createdByCursor: _this.cursor,
                });
            });
    };
    WixDataAggregate.prototype._buildPipeline = function() {
        return [
            this.filterTree ? {
                $match: this.filterTree
            } : null,
            this.groupByTree ? {
                $group: this.groupByTree
            } : null,
            this.groupByTree ?
            {
                $project: buildProjectStage(this.groupByTree)
            } :
            null,
            this.havingTree ? {
                $match: this.havingTree
            } : null,
            this.orderBy.length > 0 ? {
                $sort: this.orderBy
            } : null,
            {
                $skip: this.skipNumber
            },
        ].filter(function(stage) {
            return stage !== null;
        });
    };
    WixDataAggregate.prototype._aggregateValidator = function(operatorName) {
        return new AggregationValidator(operatorName, this.invalidArguments);
    };
    return WixDataAggregate;
}(sortMixin(groupMixin())));
export {
    WixDataAggregate
};

function rejectIfInvalid(invalidArguments, collectionName) {
    if (invalidArguments.length > 0) {
        return Promise.reject(validationError(messages.aggregateValidations.aggregateInvalid(collectionName, invalidArguments)));
    } else {
        return Promise.resolve();
    }
}

function buildProjectStage(groupByTree) {
    var _a;
    var keys = Object.keys(groupByTree);
    var fields = keys.map(function(key) {
        var _a;
        return (_a = {},
            _a[key] = 1,
            _a);
    });
    if (isObject(groupByTree._id)) {
        fields.push(projectId(groupByTree._id));
    } else if (isString(groupByTree._id) && groupByTree._id !== '0') {
        fields.push((_a = {}, _a[groupByTree._id.substr(1)] = '$_id', _a));
    }
    return Object.assign.apply(Object, __spreadArray([{}], fields, false));
}

function projectId(idField) {
    var keys = Object.keys(idField);
    var fields = keys.map(function(key) {
        var _a;
        return (_a = {}, _a[key] = "$_id.".concat(key), _a);
    });
    return Object.assign.apply(Object, __spreadArray([{}], fields, false));
}
export function aggregateFactory(provider, collectionName) {
    return new WixDataAggregate({
        provider: provider,
        collectionName: collectionName
    });
}
export function aggregateFetchFactory(provider, collectionName, limit, cursor) {
    return new WixDataAggregate({
        provider: provider,
        collectionName: collectionName,
        cursor: cursor,
        limitNumber: limit,
    });
}
var WixDataAggregateResult = /** @class */ (function() {
    function WixDataAggregateResult(obj) {
        if (!obj) {
            return;
        }
        this._items = obj.items;
        this._hasNext = obj.hasNext;
        this._aggregate = obj.aggregate;
        this._pageSize = obj.pageSize;
        this._cursors = obj.cursors;
        this._createdByCursor = obj.createdByCursor;
    }
    Object.defineProperty(WixDataAggregateResult.prototype, "items", {
        get: function() {
            return this._items;
        },
        enumerable: false,
        configurable: true
    });
    WixDataAggregateResult.prototype.hasNext = function() {
        return this._hasNext;
    };
    WixDataAggregateResult.prototype.hasPrev = function() {
        if (isCursorDefined(this._createdByCursor) || this._cursors) {
            return isCursorDefined(this.prevCursor);
        } else {
            return this._aggregate.skipNumber > 0;
        }
    };
    Object.defineProperty(WixDataAggregateResult.prototype, "length", {
        get: function() {
            return this._items.length;
        },
        enumerable: false,
        configurable: true
    });
    WixDataAggregateResult.prototype.next = function() {
        if (!this.hasNext()) {
            return this._rejectNoNextPage();
        }
        var nextAggregate;
        if (isCursorDefined(this.nextCursor)) {
            nextAggregate = this._getNewCursorAggregate(this.nextCursor);
        } else {
            var skipNumber = calcSkipNumber(this._aggregate, this.length, true);
            nextAggregate = this._aggregate.skip(skipNumber);
        }
        return nextAggregate.run();
    };
    WixDataAggregateResult.prototype.prev = function() {
        if (!this.hasPrev()) {
            return this._rejectNoPrevPage();
        }
        var prevAggregate;
        if (isCursorDefined(this.prevCursor)) {
            prevAggregate = this._getNewCursorAggregate(this.prevCursor);
        } else {
            prevAggregate = this._aggregate.skip(Math.max(0, this._aggregate.skipNumber - this._aggregate.limitNumber));
        }
        return prevAggregate.run();
    };
    Object.defineProperty(WixDataAggregateResult.prototype, "nextCursor", {
        get: function() {
            return this._cursors && this._cursors.next;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataAggregateResult.prototype, "prevCursor", {
        get: function() {
            return this._cursors && this._cursors.prev;
        },
        enumerable: false,
        configurable: true
    });
    WixDataAggregateResult.prototype._getNewCursorAggregate = function(cursor) {
        var aggregate = this._aggregate;
        return aggregateFetchFactory(aggregate.provider, aggregate.collectionName, aggregate.limitNumber, cursor);
    };
    WixDataAggregateResult.prototype._rejectNoPrevPage = function() {
        return Promise.reject(validationError(messages.queryValidations.noPrevPage(this._aggregate.collectionName)));
    };
    WixDataAggregateResult.prototype._rejectNoNextPage = function() {
        return Promise.reject(validationError(messages.queryValidations.noNextPage(this._aggregate.collectionName)));
    };
    return WixDataAggregateResult;
}());
export {
    WixDataAggregateResult
};
var MAX_SAFE_INTEGER = 9007199254740991;
var AggregationValidator = /** @class */ (function(_super) {
    __extends(AggregationValidator, _super);

    function AggregationValidator(operatorName, previousInvalidArguments) {
        var _this = _super.call(this, previousInvalidArguments) || this;
        _this.operatorName = operatorName;
        return _this;
    }
    AggregationValidator.prototype.filterBuilder = function(filter) {
        var _this = this;
        return this.addValidation(function() {
            return filter.constructorName === 'FilterBuilder';
        }, function() {
            return messages.aggregateValidations.filterMustBeBuilder(_this.operatorName);
        });
    };
    AggregationValidator.prototype.filterIsNotSet = function(aggregate) {
        var _this = this;
        return this.addValidation(function() {
            return aggregate.filterTree === undefined;
        }, function() {
            return messages.aggregateValidations.filterIsAlreadySet(_this.operatorName);
        });
    };
    AggregationValidator.prototype.havingIsNotSet = function(aggregate) {
        var _this = this;
        return this.addValidation(function() {
            return aggregate.havingTree === undefined;
        }, function() {
            return messages.aggregateValidations.filterIsAlreadySet(_this.operatorName);
        });
    };
    AggregationValidator.prototype.groupIsNotSet = function(groupByTree) {
        var _this = this;
        return this.addValidation(function() {
            return groupIsNotSet(groupByTree);
        }, function() {
            return messages.aggregateValidations.groupIsAlreadySet(_this.operatorName);
        });
    };
    AggregationValidator.prototype._isNumber = function(specifier, operand) {
        var _this = this;
        return this.addValidation(function() {
            return isNumber(operand);
        }, function() {
            return messages.queryValidations.isNumber(_this.operatorName, specifier, operand);
        });
    };
    AggregationValidator.prototype.isPositiveNumber = function(operand) {
        var _this = this;
        return this._isNumber('positive', operand).addValidation(function() {
            return !Number.isNaN(operand) && operand > 0;
        }, function() {
            return messages.queryValidations.isPositiveNumber(_this.operatorName, operand);
        });
    };
    AggregationValidator.prototype.isNonNegativeNumber = function(operand) {
        var _this = this;
        return this._isNumber('non-negative', operand).addValidation(function() {
            return !Number.isNaN(operand) && operand >= 0;
        }, function() {
            return messages.queryValidations.isNonNegativeNumber(_this.operatorName, operand);
        });
    };
    AggregationValidator.prototype.isInteger = function(operand) {
        var _this = this;
        return this.addValidation(function() {
            return !Number.isNaN(operand) &&
                Number.isFinite(operand) &&
                Number.isInteger(operand) &&
                operand < MAX_SAFE_INTEGER &&
                operand > -MAX_SAFE_INTEGER;
        }, function() {
            return messages.queryValidations.isInteger(_this.operatorName, operand);
        });
    };
    return AggregationValidator;
}(AggregatingValidator));

function groupIsNotSet(groupByTree) {
    return groupByTree ? groupByTree._id === '0' : true;
}
//# sourceMappingURL=aggregate.js.map