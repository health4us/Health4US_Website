import {
    __assign,
    __extends
} from "tslib";
import {
    clone,
    isString,
    isArray
} from '@wix/wix-data-utils';
import {
    AggregatingValidator,
    messages,
    validationError,
} from '@wix/wix-data-errors';
var sortMixin = function(Base) {
    if (Base === void 0) {
        Base = /** @class */ (function() {
            function class_1() {}
            return class_1;
        }());
    }
    return /** @class */ (function(_super) {
        __extends(class_2, _super);

        function class_2(obj) {
            if (obj === void 0) {
                obj = {};
            }
            var _this = _super.call(this, obj) || this;
            _this.orderBy = obj.orderBy || [];
            _this.invalidArguments = obj.invalidArguments || [];
            return _this;
        }
        class_2.prototype.ascending = function() {
            var fields = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fields[_i] = arguments[_i];
            }
            return this._sortClause('asc', '.ascending', fields);
        };
        class_2.prototype.descending = function() {
            var fields = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fields[_i] = arguments[_i];
            }
            return this._sortClause('desc', '.descending', fields);
        };
        class_2.prototype.getSortModel = function() {
            if (this.invalidArguments.length > 0) {
                throw validationError(messages.sortBuilderInvalid(this.invalidArguments));
            }
            return this.orderBy;
        };
        class_2.prototype.setSortModel = function(sortModel) {
            return this._copySort(sortModel, []);
        };
        class_2.prototype._sortClause = function(operatorSymbol, operatorName, args) {
            var orderBy = [];
            if (this.orderBy) {
                orderBy = clone(this.orderBy);
            }
            var appendClause = createAppendClauseFn(orderBy, operatorSymbol);
            var effectiveArgs = isArray(args[0]) && args.length === 1 ?
                args[0] :
                Array.prototype.slice.call(args, 0);
            var _a = this._sortValidator(operatorName)
                .arityIsAtLeastOne(args)
                .allStrings(effectiveArgs)
                .validateAndAggregate(),
                newInvalidArguments = _a[0],
                valid = _a[1];
            if (valid) {
                effectiveArgs.forEach(appendClause);
            }
            return this._copySort(orderBy, newInvalidArguments);
        };
        class_2.prototype._sortValidator = function(operatorName) {
            return new SortValidator(operatorName, this.invalidArguments);
        };
        class_2.prototype._copySort = function(orderBy, invalidArguments) {
            return new this.constructor(__assign(__assign({}, this), {
                orderBy: orderBy,
                invalidArguments: invalidArguments
            }));
        };
        return class_2;
    }(Base));
};

function createAppendClauseFn(destination, direction) {
    return function(field) {
        var spec = {};
        spec[field] = direction;
        destination.push(spec);
    };
}
var SortValidator = /** @class */ (function(_super) {
    __extends(SortValidator, _super);

    function SortValidator(operatorName, previousInvalidArguments) {
        var _this = _super.call(this, previousInvalidArguments) || this;
        _this.operatorName = operatorName;
        return _this;
    }
    SortValidator.prototype.allStrings = function(effectiveArgs) {
        var _this = this;
        return this.addValidation(function() {
            return effectiveArgs.every(isString);
        }, function() {
            return messages.sortValidations.typeIsStringOrArrayOfStrings(_this.operatorName, effectiveArgs);
        });
    };
    return SortValidator;
}(AggregatingValidator));
export {
    SortValidator
};
export default sortMixin;
//# sourceMappingURL=sortMixin.js.map