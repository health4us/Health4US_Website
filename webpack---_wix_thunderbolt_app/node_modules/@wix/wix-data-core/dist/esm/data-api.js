import {
    __assign,
    __spreadArray
} from "tslib";
import {
    queryFactory,
    queryResultFactory
} from './query';
import {
    groupFactory
} from './group';
import {
    aggregateFactory,
    aggregateFetchFactory,
} from './aggregate';
import {
    filterBuilderFactory
} from '@wix/platformized-filter-builder';
import {
    sortBuilderFactory
} from './sort/sortBuilder';
import {
    apiValidator,
    BulkError
} from '@wix/wix-data-errors';
import {
    isObject,
    isArray
} from '@wix/wix-data-utils';
import {
    referenceResultFactory
} from './multiref';
import {
    hasField
} from './utils/field-key-utils';
var WixDataApi = /** @class */ (function() {
    function WixDataApi(provider) {
        var _this = this;
        this.get = withArgs(function(args, collectionName, itemId, options) {
            return apiValidator()
                .arity('get', args, 2, 3)
                .collectionName(collectionName)
                .itemId(itemId)
                .options(options)
                .validateAndReject()
                .then(function() {
                    return _this.provider.get(collectionName, itemId, options);
                })
                .then(passOrWrap);
        });
        this.insert = withArgs(function(args, collectionName, item, options) {
            return apiValidator()
                .arity('insert', args, 2, 3)
                .validateAndReject()
                .then(function() {
                    return mutate(_this.provider, 'insert')(collectionName, item, options);
                });
        });
        this.query = function(collectionName) {
            return queryFactory(_this.provider, collectionName);
        };
        this.filter = function() {
            return filterBuilderFactory();
        };
        this.sort = function() {
            return sortBuilderFactory();
        };
        this.find = function(collectionName, filter, order, skip, limit, options, includes, omitTotalCount) {
            var query = queryFactory(_this.provider, collectionName);
            query.filterTree = filter;
            query.orderBy = order;
            query.skipNumber = skip;
            query.limitNumber = limit;
            query.included = includes;
            var adjustedOptions = __assign(__assign({}, options), {
                omitTotalCount: omitTotalCount
            });
            return query.find(adjustedOptions);
        };
        this.remove = withArgs(function(args, collectionName, itemId, options) {
            return apiValidator()
                .arity('remove', args, 2, 3)
                .collectionName(collectionName)
                .itemId(itemId)
                .options(options)
                .validateAndReject()
                .then(function() {
                    return _this.provider.remove(collectionName, itemId, options);
                })
                .then(passOrWrap);
        });
        this.truncate = withArgs(function(args, collectionName, options) {
            return apiValidator()
                .arity('truncate', args, 1, 2)
                .collectionName(collectionName)
                .options(options)
                .validateAndReject()
                .then(function() {
                    return _this.provider.truncate(collectionName, options);
                })
                .then(passOrWrap);
        });
        this.bulkRemove = withArgs(function(args, collectionName, itemIds, options) {
            return apiValidator()
                .arity('bulkRemove', args, 2, 3)
                .collectionName(collectionName)
                .itemIds(itemIds, collectionName)
                .options(options)
                .validateAndReject()
                .then(function() {
                    return _this.provider.bulkRemove(collectionName, itemIds, options);
                })
                .then(passOrWrap)
                .then(function(bulkResult) {
                    var errors = bulkResult.errors.map(function(err) {
                        return new BulkError(err.message, err.code, err.item, err.name, err.originalIndex);
                    });
                    return __assign(__assign({}, bulkResult), {
                        errors: errors
                    });
                });
        });
        this.save = withArgs(function(args, collectionName, item, options) {
            return apiValidator()
                .arity('save', args, 2, 3)
                .validateAndReject()
                .then(function() {
                    return mutate(_this.provider, 'save')(collectionName, item, options);
                });
        });
        this.update = withArgs(function(args, collectionName, item, options) {
            return apiValidator()
                .arity('update', args, 2, 3)
                .validateAndReject()
                .then(function() {
                    return mutate(_this.provider, 'update')(collectionName, item, options);
                });
        });
        this.fetch = withArgs(function(args, collectionName, cursor, limit, options) {
            return apiValidator()
                .arity('fetch', args, 3, 4)
                .isNonEmptyString(cursor, 'cursor')
                .validateAndReject()
                .then(function() {
                    return _this.provider.find(collectionName, undefined, undefined, undefined, limit, options, undefined, undefined, cursor);
                })
                .then(function(result) {
                    return queryResultFactory(result, _this.provider, collectionName, limit, options);
                });
        });
        this.fetchReferenced = withArgs(function(args, collectionName, cursor, limit, options) {
            return apiValidator()
                .arity('fetchReferenced', args, 3, 4)
                .isNonEmptyString(cursor, 'cursor')
                .validateAndReject()
                .then(function() {
                    var safeOptions = __assign({}, options);
                    safeOptions.limit = limit;
                    safeOptions.cursor = cursor;
                    return _this.provider
                        .queryReferenced(collectionName, undefined, undefined, safeOptions)
                        .then(function(result) {
                            return referenceResultFactory(result, _this.provider, collectionName, undefined, undefined, safeOptions);
                        });
                });
        });
        this.fetchAggregate = withArgs(function(args, collectionName, cursor, limit, options) {
            return apiValidator()
                .arity('fetchAggregate', args, 3, 4)
                .isNonEmptyString(cursor, 'cursor')
                .validateAndReject()
                .then(function() {
                    var aggregateRequest = aggregateFetchFactory(_this.provider, collectionName, limit, cursor);
                    return aggregateRequest.run(options);
                });
        });
        this.queryReferenced = withArgs(function(args, collectionName, holdingItem, relationshipAttribute, options) {
            return apiValidator()
                .arity('queryReferenced', args, 3, 4)
                .referenceParameter(holdingItem)
                .validateAndReject()
                .then(function() {
                    var itemId = normalizeRefParameter(holdingItem);
                    var safeOptions = options || {};
                    return _this.provider
                        .queryReferenced(collectionName, itemId, relationshipAttribute, safeOptions)
                        .then(function(result) {
                            return referenceResultFactory(result, _this.provider, collectionName, itemId, relationshipAttribute, options);
                        });
                });
        });
        this.insertReference = withArgs(function(args, collectionName, relationshipAttribute, left, right, options) {
            var normalizeRefs = function(refs) {
                return refs.map(function(ref) {
                    return ({
                        relationshipName: ref.relationshipName,
                        left: normalizeRefParameter(ref.left),
                        right: normalizeRefParameter(ref.right),
                    });
                });
            };
            var opts;
            var refs;
            var validate;
            if (isArray(relationshipAttribute)) {
                refs = relationshipAttribute;
                opts = left;
                validate = function() {
                    return apiValidator()
                        .arity('insertReference', args, 2, 3)
                        .references(refs)
                        .validateAndReject();
                };
            } else {
                refs = arrify(right).map(function(r) {
                    return ({
                        relationshipName: relationshipAttribute,
                        left: left,
                        right: r,
                    });
                });
                opts = options;
                validate = function() {
                    return apiValidator()
                        .arity('insertReference', args, 4, 5)
                        .references(refs)
                        .validateAndReject();
                };
            }
            return validate().then(function() {
                return _this.provider.insertReferences(collectionName, normalizeRefs(refs), opts);
            });
        });
        this.replaceReferences = withArgs(function(args, collectionName, relationshipAttribute, left, right, options) {
            right = arrify(right).map(normalizeRefParameter);
            left = normalizeRefParameter(left);
            return apiValidator()
                .arity('replaceReferences', args, 4, 5)
                .referenceParameter(left)
                .referenceParameters(right)
                .validateAndReject()
                .then(function() {
                    return _this.provider.replaceReferences(collectionName, {
                        relationshipName: relationshipAttribute,
                        left: left,
                    }, right.map(function(r) {
                        return ({
                            relationshipName: relationshipAttribute,
                            right: r,
                            left: left,
                        });
                    }), options);
                });
        });
        this.removeReference = withArgs(function(args, collectionName, relationshipAttribute, left, right, options) {
            right = arrify(right).map(normalizeRefParameter);
            left = normalizeRefParameter(left);
            return apiValidator()
                .arity('removeReference', args, 4, 5)
                .referenceParameter(left)
                .referenceRemoveParameters(right)
                .validateAndReject()
                .then(function() {
                    if (right.length === 1) {
                        return _this.provider.removeReference(collectionName, relationshipAttribute, left, right[0], options);
                    } else {
                        return _this.provider.removeReferences(collectionName, right.map(function(r) {
                            return ({
                                relationshipName: relationshipAttribute,
                                right: r,
                                left: left,
                            });
                        }), options);
                    }
                });
        });
        this.isReferenced = withArgs(function(args, collectionName, relationshipAttribute, left, right, options) {
            return apiValidator()
                .arity('isReferenced', args, 4, 5)
                .referenceParameter(left)
                .referenceParameter(right)
                .validateAndReject()
                .then(function() {
                    return _this.provider.isReferenced(collectionName, relationshipAttribute, normalizeRefParameter(left), normalizeRefParameter(right), options);
                });
        });
        this.bulkInsert = withArgs(function(args, collectionName, items, options) {
            return apiValidator()
                .arity('bulkInsert', args, 2, 3)
                .validateAndReject()
                .then(function() {
                    return _this.provider.bulkInsert(collectionName, items, options);
                })
                .then(function(bulkResult) {
                    var errors = bulkResult.errors.map(function(err) {
                        return new BulkError(err.message, err.code, err.item, err.name, err.originalIndex);
                    });
                    return __assign(__assign({}, bulkResult), {
                        errors: errors
                    });
                });
        });
        this.bulkSave = withArgs(function(args, collectionName, items, options) {
            return apiValidator()
                .arity('bulkSave', args, 2, 3)
                .validateAndReject()
                .then(function() {
                    return _this.provider.bulkSave(collectionName, items, options);
                })
                .then(function(bulkResult) {
                    var errors = bulkResult.errors.map(function(err) {
                        return new BulkError(err.message, err.code, err.item, err.name, err.originalIndex);
                    });
                    return __assign(__assign({}, bulkResult), {
                        errors: errors
                    });
                });
        });
        this.bulkUpdate = withArgs(function(args, collectionName, items, options) {
            return apiValidator()
                .arity('bulkUpdate', args, 2, 3)
                .validateAndReject()
                .then(function() {
                    return _this.provider.bulkUpdate(collectionName, items, options);
                })
                .then(function(bulkResult) {
                    var errors = bulkResult.errors.map(function(err) {
                        return new BulkError(err.message, err.code, err.item, err.name, err.originalIndex);
                    });
                    return __assign(__assign({}, bulkResult), {
                        errors: errors
                    });
                });
        });
        this.getSchema = function() {
            return _this.provider.getSchema();
        };
        this.group = function() {
            var fieldName = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fieldName[_i] = arguments[_i];
            }
            return groupFactory.apply(void 0, fieldName);
        };
        this.aggregate = function(collectionName) {
            return aggregateFactory(_this.provider, collectionName);
        };
        this.provider = provider;
    }
    Object.defineProperty(WixDataApi.prototype, "wixData", {
        get: function() {
            return this;
        },
        enumerable: false,
        configurable: true
    });
    return WixDataApi;
}());
export default WixDataApi;
/** enriches given function with arguments object */
function withArgs(f) {
    return function() {
        var others = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            others[_i] = arguments[_i];
        }
        return f.apply(void 0, __spreadArray([arguments], others, false));
    };
}

function mutate(wixData, functionName, requireId) {
    if (requireId === void 0) {
        requireId = false;
    }
    return function(collectionName, item, options) {
        return apiValidator()
            .collectionName(collectionName)
            .item(item, collectionName, requireId)
            .options(options)
            .validateAndReject()
            .then(function() {
                return warnAboutBrokenFields(item);
            })
            .then(function() {
                return wixData[functionName](collectionName, item, options);
            })
            .then(passOrWrap)
            .then(updateOriginalItem(item));
    };
}

function passOrWrap(item) {
    if (item && item.hasOwnProperty('item')) {
        return item.item;
    } else {
        return item;
    }
}

function updateOriginalItem(originalItem) {
    return function onItemResponse(item) {
        var _a;
        if (item) {
            for (var prop in item) {
                if (item.hasOwnProperty(prop)) {
                    if (!originalItem.hasOwnProperty(prop) ||
                        ((_a = Object.getOwnPropertyDescriptor(originalItem, prop)) === null || _a === void 0 ? void 0 : _a.writable) ===
                        true) {
                        originalItem[prop] = item[prop];
                    }
                }
            }
            for (var prop in originalItem) {
                if (!item.hasOwnProperty(prop)) {
                    delete originalItem[prop];
                }
            }
            return originalItem;
        } else {
            return undefined;
        }
    };
}

function arrify(obj) {
    if (isArray(obj)) {
        return obj;
    }
    return [obj];
}

function normalizeRefParameter(param) {
    return isObject(param) ? param._id : param;
}

function warnAboutBrokenFields(item) {
    var hasFieldWithDollar = hasField(item, function(key) {
        return key.startsWith('$');
    });
    var hasFieldWithDot = hasField(item, function(key) {
        return key.includes('.');
    });
    if (hasFieldWithDollar) {
        console.error("Data inserted contains field name prefixed with symbol '$'. It is not recommended to use such field names as it will not work with some data operations.");
    }
    if (hasFieldWithDot) {
        console.warn("Data inserted contains field name containing symbol '.'. It is not recommended to use such field names as it will not work with some data operations.");
    }
}
//# sourceMappingURL=data-api.js.map