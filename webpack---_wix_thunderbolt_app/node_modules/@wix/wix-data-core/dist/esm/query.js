import {
    __assign,
    __extends,
    __spreadArray
} from "tslib";
import {
    isString,
    isNumber,
    clone
} from '@wix/wix-data-utils';
import {
    AggregatingValidator,
    apiValidator,
    messages,
    validationError,
} from '@wix/wix-data-errors';
import {
    filterMixin,
    optimiseQuery
} from '@wix/platformized-filter-builder';
import sortMixin from './sort/sortMixin';
import {
    isCursorDefined
} from './paging/cursors';
import {
    PagingMetadata
} from './paging/pagingmetadata';
import {
    calcSkipNumber
} from './utils/skip-calculator';
var MAX_SAFE_INTEGER = 9007199254740991;
var WixDataQuery = /** @class */ (function(_super) {
    __extends(WixDataQuery, _super);

    function WixDataQuery(obj) {
        var _this = _super.call(this, obj) || this;
        _this.provider = obj.provider;
        _this.collectionName = obj.collectionName;
        _this.limitNumber = obj.limitNumber;
        _this.invalidArguments = obj.invalidArguments;
        _this.orderBy = obj.orderBy;
        _this.skipNumber = obj.skipNumber;
        _this.included = obj.included;
        _this.projectedFields = obj.projectedFields;
        _this.cursor = obj.cursor;
        return _this;
    }
    Object.defineProperty(WixDataQuery.prototype, "constructorName", {
        get: function() {
            return 'WixDataQuery';
        },
        enumerable: false,
        configurable: true
    });
    WixDataQuery.prototype.count = function(options) {
        var _this = this;
        return rejectIfInvalid(this.invalidArguments, this.collectionName)
            .then(function() {
                return apiValidator().options(options).validateAndReject();
            })
            .then(function() {
                return _this.provider.count(_this.collectionName, _this.getOptimizedFilter(), options);
            })
            .then(function(result) {
                return result.totalCount;
            });
    };
    WixDataQuery.prototype.distinct = function(fieldName, options) {
        var _this = this;
        var self = this;
        var omitTotalCount = (options || {}).omitTotalCount;
        var skipNumber = this.cursor ? undefined : this.skipNumber;
        var fieldNameUpdated = this.cursor ? '' : fieldName;
        return rejectIfInvalid(this.invalidArguments, this.collectionName)
            .then(function() {
                return apiValidator().options(options).validateAndReject();
            })
            .then(function() {
                return apiValidator().fieldName(fieldNameUpdated).validateAndReject();
            })
            .then(function() {
                return _this.provider.distinct(_this.collectionName, _this.getOptimizedFilter(), _this.orderBy, fieldNameUpdated, skipNumber, _this.limitNumber, options, _this.cursor, undefined, omitTotalCount);
            })
            .then(function(result) {
                var pagingMetadata = result.pagingMetadata || new PagingMetadata();
                var cursors = pagingMetadata.cursors,
                    _a = pagingMetadata.hasNext,
                    hasNext = _a === void 0 ? false : _a;
                var isCursored = isCursorDefined(cursors === null || cursors === void 0 ? void 0 : cursors.next) || isCursorDefined(cursors === null || cursors === void 0 ? void 0 : cursors.prev);
                var optionsUpdated = isCursored ?
                    __assign(__assign({}, options), {
                        omitTotalCount: true
                    }) : options;
                return new WixDataQueryResult({
                    createdByCursor: _this.cursor,
                    items: result.items,
                    length: result.items.length,
                    query: self,
                    totalCount: result.totalCount,
                    cursors: cursors,
                    partialIncludes: false,
                    pagingFunction: function() {
                        return this.distinct(fieldNameUpdated, optionsUpdated);
                    },
                    hasNext: hasNext,
                });
            });
    };
    WixDataQuery.prototype._transformOrderingForAggregates = function(orderBy, fieldName) {
        if (orderBy === void 0) {
            orderBy = [];
        }
        if (orderBy.length > 0) {
            return orderBy
                .filter(function(order) {
                    return order.hasOwnProperty(fieldName);
                })
                .map(function(order) {
                    return {
                        _id: order[fieldName]
                    };
                });
        } else {
            return null;
        }
    };
    WixDataQuery.prototype._distinctValuesPipeline = function(fieldName) {
        return [
            this.filterTree && Object.keys(this.filterTree).length > 0 ?
            {
                $match: this.filterTree
            } :
            null,
            {
                $distinct: "$".concat(fieldName)
            },
        ].filter(this._stageFilter);
    };
    WixDataQuery.prototype._stageFilter = function(stage) {
        return stage !== null;
    };
    WixDataQuery.prototype.fields = function() {
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        var newProjectedFields = clone(this.projectedFields);
        for (var i = 0; i < fields.length; i++) {
            newProjectedFields.push(fields[i]);
        }
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            invalidArguments: this.invalidArguments,
            included: this.included,
            cursor: this.cursor,
            projectedFields: newProjectedFields,
        });
    };
    WixDataQuery.prototype.find = function(options) {
        var _this = this;
        var self = this;
        var omitTotalCount = (options || {}).omitTotalCount;
        return rejectIfInvalid(this.invalidArguments, this.collectionName)
            .then(function() {
                return apiValidator().options(options).validateAndReject();
            })
            .then(function() {
                var skipNumber = _this.cursor ? undefined : _this.skipNumber;
                return _this.provider.find(_this.collectionName, _this.getOptimizedFilter(), _this.orderBy, skipNumber, _this.limitNumber, options, _this.included, omitTotalCount, _this.cursor, _this.projectedFields);
            })
            .then(function(result) {
                var cursors = result.pagingMetadata.cursors;
                var isCursored = isCursorDefined(cursors === null || cursors === void 0 ? void 0 : cursors.next) || isCursorDefined(cursors === null || cursors === void 0 ? void 0 : cursors.prev);
                var optionsUpdated = isCursored ?
                    __assign(__assign({}, options), {
                        omitTotalCount: true
                    }) : options;
                return new WixDataQueryResult({
                    createdByCursor: _this.cursor,
                    totalCount: result.totalCount,
                    query: self,
                    items: result.items,
                    cursors: cursors,
                    partialIncludes: result.partialIncludes,
                    hasNext: result.pagingMetadata.hasNext,
                    pagingFunction: function() {
                        return this.find(optionsUpdated);
                    },
                });
            });
    };
    WixDataQuery.prototype.limit = function(limitNumber) {
        var newInvalidArguments = this._queryValidator('.limit')
            .arityIsOne(arguments)
            .isPositiveNumber(limitNumber)
            .isInteger(limitNumber)
            .validateAndAggregate()[0];
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: this.skipNumber,
            limitNumber: limitNumber,
            included: this.included,
            cursor: this.cursor,
            invalidArguments: newInvalidArguments,
            projectedFields: this.projectedFields,
        });
    };
    WixDataQuery.prototype.skip = function(skipNumber) {
        var newInvalidArguments = this._queryValidator('.skip')
            .arityIsOne(arguments)
            .isNonNegativeNumber(skipNumber)
            .isInteger(skipNumber)
            .validateAndAggregate()[0];
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: skipNumber,
            limitNumber: this.limitNumber,
            included: this.included,
            cursor: this.cursor,
            invalidArguments: newInvalidArguments,
            projectedFields: this.projectedFields,
        });
    };
    WixDataQuery.prototype.include = function() {
        var propertyName = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            propertyName[_i] = arguments[_i];
        }
        var newIncludedFields = clone(this.included);
        for (var i = 0; i < propertyName.length; i++) {
            newIncludedFields.push(propertyName[i]);
        }
        return new WixDataQuery({
            provider: this.provider,
            collectionName: this.collectionName,
            filterTree: this.filterTree,
            orderBy: this.orderBy,
            skipNumber: this.skipNumber,
            limitNumber: this.limitNumber,
            invalidArguments: this.invalidArguments,
            included: newIncludedFields,
            cursor: this.cursor,
            projectedFields: this.projectedFields,
        });
    };
    WixDataQuery.prototype.setFilterModel = function(filterModel) {
        var newQuery = _super.prototype.setFilterModel.call(this, filterModel);
        return this._setQuerySpecificInvalidArguments(newQuery);
    };
    WixDataQuery.prototype.getOptimizedFilter = function() {
        try {
            return optimiseQuery(this.filterTree);
        } catch (e) {
            // there's no filter schema validation in `setFilterModel`
            // so filter should be passed as-is and detailed validation errors received from backend
            return this.filterTree;
        }
    };
    WixDataQuery.prototype.setSortModel = function(sortModel) {
        var newQuery = _super.prototype.setSortModel.call(this, sortModel);
        return this._setQuerySpecificInvalidArguments(newQuery);
    };
    WixDataQuery.prototype._setQuerySpecificInvalidArguments = function(newQuery) {
        var validateIfDefined = function(value, validator) {
            return value !== undefined ? validator.validateAndAggregate()[0] : [];
        };
        var limitValidator = this._queryValidator('.limit', [])
            .isPositiveNumber(this.limitNumber)
            .isInteger(this.limitNumber);
        var skipValidator = this._queryValidator('.skip', [])
            .isNonNegativeNumber(this.skipNumber)
            .isInteger(this.skipNumber);
        var invalidArguments = __spreadArray(__spreadArray([], validateIfDefined(this.limitNumber, limitValidator), true), validateIfDefined(this.skipNumber, skipValidator), true);
        return Object.assign(newQuery, {
            invalidArguments: invalidArguments
        });
    };
    WixDataQuery.prototype._queryValidator = function(operatorName, invalidArguments) {
        if (invalidArguments === void 0) {
            invalidArguments = this.invalidArguments;
        }
        return new QueryValidator(operatorName, invalidArguments);
    };
    return WixDataQuery;
}(filterMixin(sortMixin())));
export {
    WixDataQuery
};

function rejectIfInvalid(invalidArguments, collectionName) {
    var collectionNameInvalid = isString(collectionName) ?
        [] :
        [messages.collectionNameMustBeAString()];
    var allInvalids = collectionNameInvalid.concat(invalidArguments);
    if (allInvalids.length > 0) {
        return Promise.reject(validationError(messages.queryValidations.queryInvalid(collectionName, allInvalids)));
    } else {
        return Promise.resolve();
    }
}
export function queryFactory(provider, collectionName) {
    return new WixDataQuery({
        provider: provider,
        collectionName: collectionName,
        filterTree: {},
        orderBy: undefined,
        skipNumber: 0,
        invalidArguments: [],
        included: [],
        projectedFields: [],
    });
}
var WixDataQueryResult = /** @class */ (function() {
    function WixDataQueryResult(obj) {
        var _this = this;
        this._executeQuery = function(query) {
            return _this._pagingFunction.bind(query)();
        };
        this._withCalculatedSkip = function(query, isNext) {
            query.skipNumber = calcSkipNumber(_this.query, _this.length, isNext);
            return Promise.resolve(query);
        };
        if (!obj) {
            return;
        }
        this._items = obj.items;
        this._totalCount = obj.totalCount;
        this._cursors = obj.cursors;
        this._createdByCursor = obj.createdByCursor;
        this._query = obj.query;
        this._partialIncludes = obj.partialIncludes;
        this._pagingFunction = obj.pagingFunction;
        this._hasNext = obj.hasNext;
        // todo: to not forget
        // these properties are used by the client - they shouldn't be defined here....BUT since they are, we'll keep them for now, and move them later on to the client.
        this.nextSkipNumber = calcSkipNumber(this.query, this.length, true);
        this.prevSkipNumber = calcSkipNumber(this.query, this.length, false);
    }
    Object.defineProperty(WixDataQueryResult.prototype, "items", {
        get: function() {
            return this._items;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "length", {
        get: function() {
            return this.items.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "totalCount", {
        get: function() {
            return this._totalCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "query", {
        get: function() {
            return this._query;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "pageSize", {
        get: function() {
            return this._query.limitNumber;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "totalPages", {
        get: function() {
            if (this.totalCount && this.pageSize) {
                return Math.ceil(this.totalCount / this.pageSize);
            }
            if (this.totalCount === 0) {
                return 0;
            }
            var skip = this.query.skipNumber || 0;
            if (this.totalCount && this.length + skip <= this.totalCount) {
                return Math.ceil(this.totalCount / this.length);
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "currentPage", {
        get: function() {
            if (this.length === 0) {
                return undefined;
            }
            var skip = this.query.skipNumber || 0;
            if (this.totalCount <= 0 ||
                skip >= this.totalCount ||
                this.pageSize === undefined) {
                if (this.hasNext()) {
                    return Math.floor(skip / this.length);
                }
                return undefined;
            }
            return Math.floor(skip / this.pageSize);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "partialIncludes", {
        get: function() {
            return this._partialIncludes;
        },
        enumerable: false,
        configurable: true
    });
    WixDataQueryResult.prototype.next = function() {
        var _this = this;
        if (!this.hasNext()) {
            return this._rejectNoNextPage();
        }
        if (isCursorDefined(this.nextCursor)) {
            return this._getNewCursorQuery(this.nextCursor, true)
                .then(function(query) {
                    return _this._executeQuery(query);
                })
                .then(function(result) {
                    return result._withTotalCount(_this._totalCount);
                });
        } else {
            return this._getNewQuery(true).then(function(query) {
                return _this._executeQuery(query);
            });
        }
    };
    WixDataQueryResult.prototype.prev = function() {
        var _this = this;
        if (!this.hasPrev()) {
            return this._rejectNoPrevPage();
        }
        if (isCursorDefined(this.prevCursor)) {
            return this._getNewCursorQuery(this.prevCursor, false)
                .then(function(query) {
                    return _this._executeQuery(query);
                })
                .then(function(result) {
                    return result._withTotalCount(_this._totalCount);
                });
        }
        return this._getNewQuery(false).then(function(query) {
            return _this._executeQuery(query);
        });
    };
    Object.defineProperty(WixDataQueryResult.prototype, "nextCursor", {
        get: function() {
            return this._cursors && this._cursors.next;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WixDataQueryResult.prototype, "prevCursor", {
        get: function() {
            return this._cursors && this._cursors.prev;
        },
        enumerable: false,
        configurable: true
    });
    WixDataQueryResult.prototype.hasNext = function() {
        return this._hasNext;
    };
    WixDataQueryResult.prototype.hasPrev = function() {
        if (isCursorDefined(this._createdByCursor) || this._cursors) {
            return isCursorDefined(this.prevCursor);
        }
        var usedSkipNumber = this.query.skipNumber || 0;
        if (usedSkipNumber === 0 || this.totalCount <= 0) {
            return false;
        }
        var prevSkipNumber = calcSkipNumber(this.query, this.length, false);
        return prevSkipNumber >= 0;
    };
    WixDataQueryResult.prototype.toJSON = function() {
        return {
            currentPage: this.currentPage,
            items: this.items,
            length: this.length,
            pageSize: this.pageSize,
            partialIncludes: this.partialIncludes,
            query: this.query,
            totalCount: this.totalCount,
            totalPages: this.totalPages,
        };
    };
    WixDataQueryResult.prototype._getNewQuery = function(isNext) {
        return this._withCalculatedSkip(new WixDataQuery({
            provider: this.query.provider,
            collectionName: this.query.collectionName,
            filterTree: this.query.filterTree,
            orderBy: this.query.orderBy,
            limitNumber: this.query.limitNumber,
            included: this.query.included,
            invalidArguments: [],
            projectedFields: this.query.projectedFields,
        }), isNext);
    };
    WixDataQueryResult.prototype._getNewCursorQuery = function(cursor, isNext) {
        var query = new WixDataQuery({
            provider: this.query.provider,
            collectionName: this.query.collectionName,
            filterTree: {},
            limitNumber: this.query.limitNumber,
            invalidArguments: [],
            cursor: cursor,
            included: [],
            projectedFields: [],
        });
        return this._withCalculatedSkip(query, isNext);
    };
    WixDataQueryResult.prototype._withTotalCount = function(oldTotalCount) {
        this._totalCount = oldTotalCount;
        return this;
    };
    WixDataQueryResult.prototype._rejectNoPrevPage = function() {
        return Promise.reject(validationError(messages.queryValidations.noPrevPage(this.query.collectionName)));
    };
    WixDataQueryResult.prototype._rejectNoNextPage = function() {
        return Promise.reject(validationError(messages.queryValidations.noNextPage(this.query.collectionName)));
    };
    return WixDataQueryResult;
}());
export {
    WixDataQueryResult
};
var QueryValidator = /** @class */ (function(_super) {
    __extends(QueryValidator, _super);

    function QueryValidator(operatorName, previousInvalidArguments) {
        var _this = _super.call(this, previousInvalidArguments) || this;
        _this.operatorName = operatorName;
        return _this;
    }
    QueryValidator.prototype._isNumber = function(specifier, operand) {
        var _this = this;
        return this.addValidation(function() {
            return isNumber(operand);
        }, function() {
            return messages.queryValidations.isNumber(_this.operatorName, specifier, operand);
        });
    };
    QueryValidator.prototype.isPositiveNumber = function(operand) {
        var _this = this;
        return this._isNumber('positive', operand).addValidation(function() {
            return !Number.isNaN(operand) && operand > 0;
        }, function() {
            return messages.queryValidations.isPositiveNumber(_this.operatorName, operand);
        });
    };
    QueryValidator.prototype.isNonNegativeNumber = function(operand) {
        var _this = this;
        return this._isNumber('non-negative', operand).addValidation(function() {
            return !Number.isNaN(operand) && operand >= 0;
        }, function() {
            return messages.queryValidations.isNonNegativeNumber(_this.operatorName, operand);
        });
    };
    QueryValidator.prototype.isInteger = function(operand) {
        var _this = this;
        return this.addValidation(function() {
            return !Number.isNaN(operand) &&
                Number.isFinite(operand) &&
                Number.isInteger(operand) &&
                operand < MAX_SAFE_INTEGER &&
                operand > -MAX_SAFE_INTEGER;
        }, function() {
            return messages.queryValidations.isInteger(_this.operatorName, operand);
        });
    };
    QueryValidator.prototype.notGreaterThan = function(operand, value) {
        var _this = this;
        return this.addValidation(function() {
            return operand <= value;
        }, function() {
            return messages.queryValidations.notGreaterThan(_this.operatorName, operand, value);
        });
    };
    return QueryValidator;
}(AggregatingValidator));
export function queryResultFactory(result, provider, collectionName, limit, options, cursor) {
    var items = result.items,
        totalCount = result.totalCount,
        partialIncludes = result.partialIncludes,
        pagingMetadata = result.pagingMetadata;
    var _a = pagingMetadata || new PagingMetadata(),
        cursors = _a.cursors,
        _b = _a.hasNext,
        hasNext = _b === void 0 ? false : _b;
    var query = queryFactory(provider, collectionName).limit(limit);
    // Always omit total count if follow-up requests are with cursors
    var isCursored = isCursorDefined(cursors === null || cursors === void 0 ? void 0 : cursors.next) || isCursorDefined(cursors === null || cursors === void 0 ? void 0 : cursors.prev);
    var updatedOptions = isCursored ?
        __assign(__assign({}, options), {
            omitTotalCount: true
        }) : options;
    return new WixDataQueryResult({
        createdByCursor: cursor,
        items: items,
        totalCount: totalCount,
        partialIncludes: partialIncludes,
        cursors: cursors,
        query: query,
        pagingFunction: function() {
            return this.find(updatedOptions);
        },
        hasNext: hasNext,
    });
}
//# sourceMappingURL=query.js.map