import Experiments, {
    ReadOnlyExperiments,
} from './exports/experiments';
import {
    factory as biLoggerFactory
} from './exports/bi';
import {
    create as createFedopsLogger
} from './exports/fedops';
import {
    PanoramaPlatform,
    createGlobalConfig,
    panoramaClientFactory,
} from '@wix/fe-essentials/panorama-client';
import Raven from './exports/raven-js';
import {
    createRavenClient,
} from './exports/error-monitor';
import {
    createHttpClient
} from './exports/http-client';
import {
    createCurrencyFormatterWithDefaults,
    formatAddress,
} from './exports/l10n';
import {
    createPanoramaReporter
} from './panorama';
export * from './types';
/**
 * Essentials for the Viewer platform
 */
export class ViewerPlatformEssentials {
    constructor(env) {
        var _a;
        this.env = env;
        /**
         * A Fedops Logger factory
         */
        this.createFedopsLogger = createFedopsLogger;
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = biLoggerFactory;
        /**
         * A currency formatter factory
         */
        this.createCurrencyFormatterWithDefaults = createCurrencyFormatterWithDefaults;
        /**
         * Address formatter
         */
        this.formatAddress = formatAddress;
        this.createPanoramaClient = (options) => {
            const {
                fullArtifactId,
                artifactVersion,
                componentId,
                sentryDsn
            } = options;
            const {
                basePanoramaClientFactory,
                experiments
            } = this;
            return basePanoramaClientFactory.client({
                baseParams: {
                    fullArtifactId,
                    artifactVersion,
                    componentId,
                    experiments:
                        // We're comparing to true here because the experiment values can vary in their types (can be truthy strings).
                        // experiments.enabled() can't be used here because it doesn't work correctly with boolean experiment values,
                        // which is what TB seems to use (in most cases).
                        experiments.get('specs.thunderbolt.ReportExperimentsOnPanorama') ===
                        true ?
                        experiments.all() :
                        {},
                },
                pluginParams: {
                    sentryDsn,
                    sentryMain: true,
                },
            });
        };
        this.env = env;
        this.state = {
            panoramaGlobalConfig: (_a = env.panoramaGlobalConfig) !== null && _a !== void 0 ? _a : createGlobalConfig(),
        };
        this.experiments = new ReadOnlyExperiments({
            experiments: env.conductedExperiments,
        });
        this.basePanoramaClientFactory = this.createBasePanoramaClientFactory();
    }
    createBasePanoramaClientFactory() {
        const {
            env,
            experiments
        } = this;
        const {
            isSSR,
            metaSiteId,
            fetch,
            Sentry,
            sentryTransport
        } = env;
        const factory = panoramaClientFactory({
            baseParams: {
                msid: metaSiteId,
                platform: PanoramaPlatform.Viewer,
            },
            pluginParams: {
                sentry: experiments.get('specs.thunderbolt.PanoramaErrorMonitor') === true &&
                    !isSSR ?
                    Sentry :
                    undefined,
                sentryTransport,
            },
            data: {
                isSSR,
            },
        }).withGlobalConfig(this.state.panoramaGlobalConfig);
        if (experiments.get('specs.thunderbolt.Panorama') !== true) {
            factory.setMuted(true);
        } else if (fetch) {
            factory.withReporter(createPanoramaReporter(fetch));
        }
        return factory;
    }
    /**
     * Method for creating Essentials for an App
     * @param env
     */
    createAppEssentials(env) {
        return new _AppEssentials({
            env: Object.assign(Object.assign({}, env), {
                platformEnv: this.env
            }),
            essentials: this,
        });
    }
    /**
     * Method for creating Essentials for a Controller
     * @param env
     */
    createControllerEssentials(env, appEssentials) {
        return new _ControllerEssentials({
            // @ts-expect-error accessing TS-private field ðŸ˜¢
            env: Object.assign(Object.assign({}, env), {
                appEnv: appEssentials.env
            }),
            essentials: this,
            appEssentials,
        });
    }
}
const METASITE_APP_DEF_ID = '22bef345-3c5b-4c18-b782-74d4085112ff';
/**
 * Essentials for Apps within the Viewer platform
 */
export class _AppEssentials {
    constructor({
        env,
        essentials
    }) {
        var _a;
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = (options) => this.env.biLoggerFactory(options);
        /**
         * An ErrorMonitor factory (@wix/error-monitor)
         */
        this.createErrorMonitor = (options) => {
            const {
                appDefId,
                instanceId,
                platformEnv
            } = this.env;
            const {
                isSSR
            } = platformEnv;
            if (this.essentials.experiments.get('specs.thunderbolt.PanoramaErrorMonitor') === true &&
                !isSSR) {
                const {
                    fullArtifactId,
                    componentId,
                    dsn,
                    version,
                    environment
                } = options;
                const panoramaClient = this.createPanoramaClient({
                    fullArtifactId: fullArtifactId,
                    artifactVersion: version,
                    componentId: componentId,
                    sentryDsn: dsn,
                    sentryEnvironment: environment,
                    data: {
                        tags: Object.assign({
                            appDefinitionId: appDefId,
                            instanceId
                        }, options.tags),
                    },
                });
                const errorMonitor = panoramaClient.errorMonitor({
                    pluginParams: {
                        sentryLookupDsn: dsn,
                    },
                });
                return {
                    captureException(e, opts) {
                        errorMonitor.reportError(e, {
                            tags: opts === null || opts === void 0 ? void 0 : opts.tags,
                            context: opts === null || opts === void 0 ? void 0 : opts.contexts,
                        });
                        return '';
                    },
                    captureMessage(message, opts) {
                        errorMonitor.reportError(new Error(message), {
                            tags: opts === null || opts === void 0 ? void 0 : opts.tags,
                            context: opts === null || opts === void 0 ? void 0 : opts.contexts,
                        });
                        return '';
                    },
                    addBreadcrumb(breadcrumb) {
                        panoramaClient
                            .errorMonitor()
                            .addBreadcrumb(breadcrumb);
                    },
                };
            } else {
                return createRavenClient(Object.assign({
                    Raven
                }, options));
            }
        };
        /**
         * A PanoramaClient factory
         */
        this.createPanoramaClient = (options) => {
            const {
                fullArtifactId,
                artifactVersion,
                componentId,
                sentryDsn,
                sentryEnvironment,
            } = options;
            const {
                experiments
            } = this;
            return this.essentials.basePanoramaClientFactory.client({
                baseParams: {
                    fullArtifactId,
                    artifactVersion,
                    componentId,
                    experiments: this.essentials.experiments.get('specs.thunderbolt.ReportExperimentsOnPanorama') === true ?
                        experiments.all() :
                        {},
                },
                pluginParams: {
                    sentryDsn,
                    sentryEnvironment,
                },
            });
        };
        this.env = env;
        this.essentials = essentials;
        const {
            platformEnv,
            appDefId,
            shouldElevateBlocksAppPermissions
        } = env;
        const {
            isSSR,
            baseUrl,
            multilingualOptions,
            getAppToken,
            appsConductedExperiments,
        } = platformEnv;
        this.experiments = new ReadOnlyExperiments({
            experiments: (_a = appsConductedExperiments === null || appsConductedExperiments === void 0 ? void 0 : appsConductedExperiments[appDefId]) !== null && _a !== void 0 ? _a : {},
        });
        this.httpClient = createHttpClient({
            isSSR,
            baseURL: isSSR ? baseUrl : undefined,
            multilingualOptions,
            getAppToken: () => getAppToken(shouldElevateBlocksAppPermissions ? METASITE_APP_DEF_ID : appDefId),
        });
        this.createCurrencyFormatterWithDefaults =
            createCurrencyFormatterWithDefaults;
        this.formatAddress = formatAddress;
    }
    /**
     * An Experiments object factory
     */
    createExperiments({
        scopes,
        useNewApi = true,
        baseUrl,
        requestContext,
    }) {
        return new Experiments({
            scopes,
            useNewApi,
            requestContext,
            baseUrl
        });
    }
}
/**
 * Essentials for Controllers within the Viewer platform
 */
export class _ControllerEssentials {
    constructor({
        env,
        appEssentials
    }) {
        /**
         * A bi Logger and Factory for more loggers
         */
        this.biLoggerFactory = (options) => this.appEssentials.biLoggerFactory(options);
        /**
         * An ErrorMonitor factory (@wix/error-monitor)
         */
        this.createErrorMonitor = (options) => {
            return this.appEssentials.createErrorMonitor(options);
        };
        /**
         * A PanoramaClient factory
         */
        this.createPanoramaClient = (options) => {
            return this.appEssentials.createPanoramaClient(options);
        };
        /**
         * An Experiments object factory
         */
        this.createExperiments = (options) => this.appEssentials.createExperiments(options);
        this.env = env;
        this.appEssentials = appEssentials;
        this.fedopsLogger = this.env.appEnv.getLoggerForWidget({
            appId: this.env.appEnv.appDefId,
            widgetId: this.env.widgetId,
            paramsOverrides: this.env.compId ? {
                corrId: this.env.compId
            } : {},
        });
        this.experiments = this.appEssentials.experiments;
        this.httpClient = this.appEssentials.httpClient;
    }
}
//# sourceMappingURL=api.js.map