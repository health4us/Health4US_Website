import {
    __rest
} from "tslib";
const name = 'FlipScroll';
const properties = {
    schema: {},
};
const ease = 'linear';
const powerMap = {
    soft: {
        rotation: 60
    },
    medium: {
        rotation: 240
    },
    hard: {
        rotation: 420
    },
};
const directionMap = {
    vertical: 'rotationX',
    horizontal: 'rotationY',
};
const rangeValues = { in: (rotation) => ({
        fromValue: -rotation,
        toValue: 0
    }),
    out: (rotation) => ({
        fromValue: 0,
        toValue: rotation
    }),
    continuous: (rotation) => ({
        fromValue: -rotation,
        toValue: rotation,
    }),
};
/**
 * Flip Scroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        rotate = 240, direction = 'horizontal', power, range = 'continuous'
    } = _a, params = __rest(_a, ["rotate", "direction", "power", "range"]);
    const sequence = kit.sequence(params);
    const rotationAxis = directionMap[direction];
    const {
        rotation
    } = typeof power !== 'undefined' ? powerMap[power] : {
        rotation: rotate
    };
    const {
        fromValue,
        toValue
    } = rangeValues[range](rotation);
    sequence.add(kit.animate('BaseRotate3D', elements, 1000, 0, {
        from: {
            [rotationAxis]: fromValue,
            transformPerspective: 800,
        },
        to: {
            [rotationAxis]: toValue,
            transformPerspective: 800,
        },
        ease,
    }));
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=flipScroll.js.map