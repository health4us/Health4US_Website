import {
    __rest
} from "tslib";
const name = 'CircleIn';
const properties = {
    schema: {},
};
const paramsMap = {
    left: {
        dx: -1,
        angle: 45
    },
    right: {
        dx: 1,
        angle: 45
    },
};

function animate(kit, elements, duration, delay, _a = {}) {
    var {
        compRotation = 0, direction = 'right'
    } = _a, params = __rest(_a, ["compRotation", "direction"]);
    const origin = paramsMap[direction];
    const transformRotate = (origin.dx > 0 ? '+=' : '-=') + origin.angle;
    const browserRect = {
        width: kit.frame.innerWidth,
        height: kit.frame.innerHeight,
    };
    const sequence = kit.sequence(params);
    sequence.add(kit.animate('BaseFade', elements, duration, delay, {
        from: {
            opacity: 0
        },
        to: {
            opacity: 1
        },
        ease: 'none',
    }));
    elements.forEach((element) => {
        const compRect = kit.engine.getBoundingRect(element);
        const transformX = origin.dx > 0 ? browserRect.width - compRect.left : -compRect.right;
        const transformY = Math.min(-1.5 * compRect.height, Math.max(-300, -5.5 * compRect.height));
        sequence.add([
            kit.animate('BasePosition', element, duration, delay, {
                from: {
                    x: transformX
                },
                ease: 'circOut',
                immediateRender: false,
            }),
            kit.animate('BasePosition', element, duration, delay, {
                from: {
                    y: transformY
                },
                ease: 'none',
                immediateRender: false,
            }),
            kit.animate('BaseRotate', element, duration, delay, {
                from: {
                    rotation: transformRotate
                },
                ease: 'none',
                immediateRender: false,
            }),
        ], 0);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=circleIn.js.map