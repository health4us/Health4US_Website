import {
    __rest
} from "tslib";
const name = 'SpinScroll';
const properties = {
    schema: {},
};
const ease = 'linear';
const powerMap = {
    soft: {
        scaleFactor: 1
    },
    medium: {
        scaleFactor: 0.7
    },
    hard: {
        scaleFactor: 0.4
    },
};
const directionMap = {
    clockwise: 1,
    'counter-clockwise': -1,
};
const rangeValues = { in: (rotation, scale) => ({
        fromValues: {
            rotation,
            scale
        },
        toValues: {
            rotation,
            scale: 1
        },
    }),
    out: (rotation, scale) => ({
        fromValues: {
            rotation: 0,
            scale: 1
        },
        toValues: {
            rotation,
            scale
        },
    }),
    continuous: (rotation, scale) => ({
        fromValues: {
            rotation: rotation / 2,
            scale
        },
        toValues: {
            rotation,
            scale: 1
        },
    }),
};
/**
 * SpinScroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        spins = 0.15, scale = 1, direction = 'clockwise', power, range = 'in'
    } = _a, params = __rest(_a, ["spins", "scale", "direction", "power", "range"]);
    const sequence = kit.sequence(params);
    const spinDirection = directionMap[direction];
    const rotation = spins * 360;
    const {
        scaleFactor
    } = typeof power !== 'undefined' ? powerMap[power] : {
        scaleFactor: scale
    };
    const {
        fromValues,
        toValues
    } = rangeValues[range](rotation, scaleFactor);
    sequence.add([
        kit.animate('BaseRotate', elements, 1000, 0, {
            from: {
                rotation: `-=${fromValues.rotation * spinDirection}deg`
            },
            to: {
                rotation: `+=${toValues.rotation * spinDirection}deg`
            },
            ease,
        }),
        kit.animate('BaseScale', elements, 1000, 0, {
            from: {
                scale: fromValues.scale
            },
            to: {
                scale: toValues.scale
            },
            ease,
        }),
    ]);
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=spinScroll.js.map