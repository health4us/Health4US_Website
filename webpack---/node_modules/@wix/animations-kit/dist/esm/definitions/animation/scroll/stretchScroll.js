import {
    __rest
} from "tslib";
const name = 'StretchScroll';
const properties = {
    schema: {},
};
const ease = 'backInOut';
const powerMap = {
    soft: {
        scaleY: 1.2,
        scaleX: 0.8
    },
    medium: {
        scaleY: 1.5,
        scaleX: 0.6
    },
    hard: {
        scaleY: 2,
        scaleX: 0.4
    },
};
const rangeValues = { in: (scaleX, scaleY) => [{
        fromValues: {
            scale: {
                scaleX,
                scaleY
            },
            opacity: 0,
            y: `${100 * (scaleY - 1)}%`,
        },
        toValues: {
            scale: {
                scaleX: 1,
                scaleY: 1
            },
            opacity: 1,
            y: 0,
        },
        fadeDelay: 0,
    }, ],
    out: (scaleX, scaleY) => [{
        fromValues: {
            scale: {
                scaleX: 1,
                scaleY: 1
            },
            opacity: 1,
            y: 0,
        },
        toValues: {
            scale: {
                scaleX,
                scaleY
            },
            opacity: 0,
            y: `${100 * (1 - scaleY)}%`,
        },
        fadeDelay: 350,
    }, ],
    continuous: (scaleX, scaleY) => [
        ...rangeValues.in(scaleX, scaleY),
        ...rangeValues.out(scaleX, scaleY),
    ],
};
/**
 * StretchScroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        power,
        stretch = 0.6,
        range = 'out'
    } = _a, params = __rest(_a, ["power", "stretch", "range"]);
    const sequence = kit.sequence(params);
    const {
        scaleX,
        scaleY
    } = typeof power !== 'undefined' ?
        powerMap[power] :
        {
            scaleX: 1 - stretch,
            scaleY: 1 + stretch
        };
    const scenes = rangeValues[range](scaleX, scaleY);
    scenes.forEach(({
        fromValues,
        toValues,
        fadeDelay
    }) => {
        sequence.add([
            kit.animate('BaseScale', elements, 1000, 0, {
                from: fromValues.scale,
                to: toValues.scale,
                ease,
            }),
            kit.animate('BaseFade', elements, 650, fadeDelay, {
                from: {
                    opacity: fromValues.opacity
                },
                to: {
                    opacity: toValues.opacity
                },
                ease,
            }),
            kit.animate('BasePosition', elements, 1000, 0, {
                from: {
                    y: fromValues.y
                },
                to: {
                    y: toValues.y
                },
                ease,
            }),
        ]);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=stretchScroll.js.map