import {
    __rest
} from "tslib";
const name = 'Spin3dScroll';
const properties = {
    schema: {},
};
const ease = 'linear';
const MAX_Y_TRAVEL = 40;
const powerMap = {
    soft: {
        rotation: 45,
        travelY: 0
    },
    medium: {
        rotation: 100,
        travelY: 0.5
    },
    hard: {
        rotation: 200,
        travelY: 1
    },
};
const rangeValues = { in: (rotation, travelY) => ({
        fromValues: {
            rotation3d: {
                rotationX: -2 * rotation,
                rotationY: -rotation
            },
            rotation: {
                rotation: `-=${rotation}deg`
            },
            travel: travelY,
        },
        toValues: {
            rotation3d: {
                rotationX: 0,
                rotationY: 0
            },
            rotation: {
                rotation: 0
            },
            travel: 0,
        },
    }),
    out: (rotation, travelY) => ({
        fromValues: {
            rotation3d: {
                rotationX: 0,
                rotationY: 0
            },
            rotation: {
                rotation: 0
            },
            travel: 0,
        },
        toValues: {
            rotation3d: {
                rotationX: rotation * 3,
                rotationY: rotation * 2,
            },
            rotation: {
                rotation: `+=${rotation}deg`
            },
            travel: -travelY,
        },
    }),
    continuous: (rotation, travelY) => ({
        fromValues: {
            rotation3d: {
                rotationX: -2 * rotation,
                rotationY: -rotation
            },
            rotation: {
                rotation: `-=${rotation}deg`
            },
            travel: travelY,
        },
        toValues: {
            rotation3d: {
                rotationX: rotation * 1.8,
                rotationY: rotation,
            },
            rotation: {
                rotation: `+=${2 * rotation}deg`
            },
            travel: -travelY,
        },
    }),
};
/**
 * Spin3dScroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        rotate = -100, power, range = 'in', speed = 0
    } = _a, params = __rest(_a, ["rotate", "power", "range", "speed"]);
    const sequence = kit.sequence(params);
    const {
        rotation,
        travelY
    } = typeof power !== 'undefined' ?
        powerMap[power] :
        {
            rotation: rotate,
            travelY: speed
        };
    const {
        fromValues,
        toValues
    } = rangeValues[range](rotation, travelY * -MAX_Y_TRAVEL);
    sequence.add([
        kit.animate('BaseRotate3D', elements, 1000, 0, {
            from: Object.assign(Object.assign({}, fromValues.rotation3d), {
                transformPerspective: 1000
            }),
            to: Object.assign(Object.assign({}, toValues.rotation3d), {
                transformPerspective: 1000
            }),
            ease,
        }),
        kit.animate('BaseRotate', elements, 1000, 0, {
            from: fromValues.rotation,
            to: toValues.rotation,
            ease,
        }),
        kit.animate('BasePosition', elements, 1000, 0, {
            from: {
                y: `${fromValues.travel}vh`
            },
            to: {
                y: `${toValues.travel}vh`
            },
            ease: 'linear',
        }),
    ]);
    return sequence.get();
}
const api = {
    getScrubOffsets({
        power,
        range = 'in',
        speed = 0,
    }) {
        const offset = (typeof power !== 'undefined' ?
            powerMap[power].travelY :
            Math.abs(speed)) * MAX_Y_TRAVEL;
        return {
            start: range === 'out' ? '0px' : `${-offset}vh`,
            end: range === 'in' ? '0px' : `${offset}vh`,
        };
    },
};
export {
    name,
    properties,
    animate,
    api
};
//# sourceMappingURL=spin3dScroll.js.map