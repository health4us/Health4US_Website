import {
    __rest
} from "tslib";
import {
    getOutOfScreenDistance,
    getCssUnits,
} from '../../../../utils/animationsUtils';
const name = 'GlideIn';
const properties = {
    schema: {}
};
const paramsMap = {
    soft: {
        easing: 'cubicInOut'
    },
    medium: {
        easing: 'quintInOut'
    },
    hard: {
        easing: 'backOut'
    },
};

function animate(kit, elements, duration, delay, _a = {}) {
    var {
        direction = 0, distance = {
            value: 100,
            type: 'percentage'
        }, power, easing = 'quintInOut', startFromOffScreen = false
    } = _a, params = __rest(_a, ["direction", "distance", "power", "easing", "startFromOffScreen"]);
    const browserRect = {
        width: kit.frame.innerWidth,
        height: kit.frame.innerHeight,
        top: 0,
        left: 0,
    };
    const angleInRad = (direction * Math.PI) / 180;
    const unit = getCssUnits(distance.type);
    const elementsParams = elements.map((element) => startFromOffScreen ?
        Object.assign({
            element
        }, getOutOfScreenDistance(browserRect, kit.engine.getBoundingRect(element), direction)) : {
            element,
            x: `${Math.sin(angleInRad) * distance.value}${unit}`,
            y: `${Math.cos(angleInRad) * distance.value * -1}${unit}`,
        });
    const sequence = kit.sequence(params);
    sequence.add(kit.animate('BaseFade', elements, 0, 0, {
        from: {
            opacity: 0
        },
        to: {
            opacity: 1
        },
    }));
    sequence.add(elementsParams.map(({
        element,
        x,
        y
    }) => kit.animate('BasePosition', element, duration, delay, {
        from: {
            x,
            y
        },
        ease: typeof power !== 'undefined' ? paramsMap[power].easing : easing,
    })), 0);
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=glideIn.js.map