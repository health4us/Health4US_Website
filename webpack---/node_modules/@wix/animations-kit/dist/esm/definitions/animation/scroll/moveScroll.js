import {
    __rest
} from "tslib";
import {
    getCssUnits,
    transformPolarToXY,
} from '../../../utils/animationsUtils';
const name = 'MoveScroll';
const properties = {
    schema: {},
};
const powerMap = {
    soft: {
        value: 150,
        type: 'px'
    },
    medium: {
        value: 400,
        type: 'px'
    },
    hard: {
        value: 800,
        type: 'px'
    },
};
const rangeValues = { in: (travelX, travelY) => ({
        fromValue: {
            x: travelX,
            y: travelY
        },
        toValue: {
            x: 0,
            y: 0
        },
    }),
    out: (travelX, travelY) => ({
        fromValue: {
            x: 0,
            y: 0
        },
        toValue: {
            x: travelX,
            y: travelY
        },
    }),
    continuous: (travelX, travelY) => ({
        fromValue: {
            x: travelX,
            y: travelY
        },
        toValue: {
            x: -travelX,
            y: -travelY
        },
    }),
};
/**
 * Move Scroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        power,
        distance = {
            value: 400,
            type: 'px'
        },
        angle = 210,
        range = 'in'
    } = _a, params = __rest(_a, ["power", "distance", "angle", "range"]);
    const sequence = kit.sequence(params);
    const travel = power ? powerMap[power] : distance;
    const [travelX, travelY] = transformPolarToXY(angle - 90, travel.value);
    const {
        fromValue,
        toValue
    } = rangeValues[range](Math.round(travelX), Math.round(travelY));
    const units = getCssUnits(travel.type);
    sequence.add(kit.animate('BasePosition', elements, 1000, 0, {
        from: {
            x: `${fromValue.x}${units}`,
            y: `${fromValue.y}${units}`
        },
        to: {
            x: `${toValue.x}${units}`,
            y: `${toValue.y}${units}`
        },
        ease: 'linear',
    }));
    return sequence.get();
}
const api = {
    getScrubOffsets({
        angle = 210,
        distance = {
            value: 400,
            type: 'px'
        },
        power,
        range = 'in',
    }) {
        const travel = power ? powerMap[power] : distance;
        const [, travelY] = transformPolarToXY(angle - 90, travel.value);
        const isTravelingDownwards = (travelY < 0 && range !== 'out') || (travelY > 0 && range === 'out');
        const units = getCssUnits(travel.type);
        const startOffsetAdd = isTravelingDownwards ? `${travelY}${units}` : '0px';
        const endOffsetAdd = isTravelingDownwards ?
            `${Math.abs(travelY)}${units}` :
            '0px';
        return {
            start: range === 'out' ? '0px' : startOffsetAdd,
            end: range === 'in' ? '0px' : endOffsetAdd,
        };
    },
};
export {
    name,
    properties,
    animate,
    api
};
//# sourceMappingURL=moveScroll.js.map