import {
    __rest
} from "tslib";
import {
    getEasingFamily,
    getCssUnits
} from '../../../utils/animationsUtils';
const name = 'Breathe';
const properties = {
    schema: {},
};
const directionMap = {
    vertical: 'y',
    horizontal: 'x',
    center: 'z',
};

function getDistance({
    value,
    type = 'px'
}, multiplier = 1) {
    const distance = value * multiplier;
    const units = getCssUnits(type);
    return `${distance}${units}`;
}
/**
 * Breathe animation object
 */
function animate(kit, elements, duration, repeatDelay, _a = {}) {
    var {
        direction = 'vertical', distance = {
            value: 25,
            type: 'px'
        }, easing = 'sineInOut'
    } = _a, params = __rest(_a, ["direction", "distance", "easing"]);
    const sequence = kit.sequence(params);
    const transformAxis = directionMap[direction];
    const travel = getDistance(distance);
    const ease = getEasingFamily(easing);
    if (transformAxis === directionMap.center) {
        sequence.add(kit.engine.set(elements, {
            transformPerspective: 800,
        }));
    }
    sequence
        .add(kit.animate('BasePosition', elements, duration / 4, 0, {
            to: {
                [transformAxis]: travel
            },
            ease: ease.out,
        }))
        .add(kit.animate('BasePosition', elements, duration / 2, 0, {
            to: {
                [transformAxis]: `-${travel}`
            },
            ease: ease.inOut,
        }));
    if (repeatDelay) {
        // in case a delay is applied, animate a different sequence which decays to a stop
        sequence
            .add(kit.animate('BasePosition', elements, duration / 2, 0, {
                to: {
                    [transformAxis]: getDistance(distance, 0.5)
                },
                ease: ease.inOut,
            }))
            .add(kit.animate('BasePosition', elements, duration / 2, 0, {
                to: {
                    [transformAxis]: getDistance(distance, -0.25)
                },
                ease: ease.inOut,
            }))
            .add(kit.animate('BasePosition', elements, duration / 3, 0, {
                to: {
                    [transformAxis]: 0
                },
                ease: ease.inOut,
            }))
            .add(kit.animate('BaseNone', elements, repeatDelay, 0)); // add repeat delay
    } else {
        sequence.add(kit.animate('BasePosition', elements, duration / 4, 0, {
            to: {
                [transformAxis]: 0
            },
            ease: ease.in,
        }));
    }
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=breathe.js.map