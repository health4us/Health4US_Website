import {
    __rest
} from "tslib";
import {
    getClipParams,
    getAdjustedDirection,
} from '../../../../utils/animationsUtils';
const name = 'WinkIn';
const properties = {
    schema: {}
};
const paramsMap = {
    vertical: {
        scaleY: 0,
        scaleX: 1,
        idx: 0,
        clipDirection: 'vertical'
    },
    horizontal: {
        scaleY: 1,
        scaleX: 0,
        idx: 1,
        clipDirection: 'horizontal'
    },
};
/**
 * WinkIn animation object
 */
function animate(kit, elements, duration, delay, _a = {}) {
    var {
        direction = 'horizontal', easing = 'quintInOut'
    } = _a, params = __rest(_a, ["direction", "easing"]);
    const sequence = kit.sequence(params);
    sequence.add(kit.animate('BaseFade', elements, duration, delay, {
        from: {
            opacity: 0
        },
        to: {
            opacity: 1
        },
        ease: 'quadOut',
    }));
    elements.forEach((element) => {
        const compRect = kit.engine.getBoundingRect(element);
        const contentRect = kit.engine.getBoundingContentRect(element);
        const elementAngleInDeg = Number(kit.engine.getProperty(element, '--comp-rotate-z') || 0);
        const adjDirection = getAdjustedDirection(paramsMap, direction, elementAngleInDeg);
        const {
            scaleX,
            scaleY,
            clipDirection
        } = paramsMap[adjDirection];
        const clip = getClipParams(compRect, contentRect, clipDirection, {
            minimum: 100
        });
        sequence.add([
            kit.animate('BaseClipPath', element, duration, delay, {
                from: clip,
                ease: easing,
            }),
            kit.animate('BaseScale', element, duration * 0.85, delay, {
                from: {
                    scaleX,
                    scaleY
                },
                ease: easing,
            }),
        ], 0);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=winkIn.js.map