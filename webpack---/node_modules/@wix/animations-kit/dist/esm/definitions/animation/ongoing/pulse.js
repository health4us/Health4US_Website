import {
    __rest
} from "tslib";
import {
    keyframesToDuration,
    mapRange
} from '../../../utils/animationsUtils';
const name = 'Pulse';
const properties = {
    schema: {},
};
const keyframes_scale = [{
        keyframe: 27,
        scale: 0.96
    },
    {
        keyframe: 45,
        scale: 1
    },
    {
        keyframe: 72,
        scale: 0.93
    },
    {
        keyframe: 100,
        scale: 1
    },
];
const powerMap = {
    soft: {
        pulseOffset: 0
    },
    medium: {
        pulseOffset: 0.06
    },
    hard: {
        pulseOffset: 0.12
    },
};
/**
 * Pulse animation object
 */
function animate(kit, elements, duration, delay, _a = {}) {
    var {
        power,
        intensity = 0
    } = _a, params = __rest(_a, ["power", "intensity"]);
    const sequence = kit.sequence(params);
    const durations = keyframesToDuration(keyframes_scale, duration);
    const responsivePulseOffset = mapRange(0, 1, powerMap.soft.pulseOffset, powerMap.hard.pulseOffset, intensity);
    const pulseOffset = typeof power !== 'undefined' ?
        powerMap[power].pulseOffset :
        responsivePulseOffset;
    keyframes_scale.forEach(({
        scale
    }, index) => {
        sequence.add(kit.animate('BaseScale', elements, durations[index], 0, {
            to: {
                scale: scale - (scale < 1 ? pulseOffset : 0)
            },
        }));
    });
    sequence.add(kit.animate('BaseNone', elements, delay, 0)); // add repeat delay
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=pulse.js.map