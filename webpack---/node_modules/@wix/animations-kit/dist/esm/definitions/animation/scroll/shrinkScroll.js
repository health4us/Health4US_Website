import {
    __rest
} from "tslib";
const name = 'ShrinkScroll';
const properties = {
    schema: {},
};
const MAX_Y_TRAVEL = 40;
const powerMap = {
    soft: {
        scaleFrom: 1.2,
        scaleTo: 0.8,
        travelY: 0
    },
    medium: {
        scaleFrom: 1.7,
        scaleTo: 0.3,
        travelY: 0.5
    },
    hard: {
        scaleFrom: 3.5,
        scaleTo: 0,
        travelY: 1
    },
};
const rangeValues = { in: (scaleFrom, _scaleTo, travelY) => ({
        fromValues: {
            scale: scaleFrom,
            travel: travelY
        },
        toValues: {
            scale: 1,
            travel: 0
        },
        scaleDuration: 1000,
        scaleEase: 'sineIn',
    }),
    out: (_scaleFrom, scaleTo, travelY) => ({
        fromValues: {
            scale: 1,
            travel: 0
        },
        toValues: {
            scale: scaleTo,
            travel: -travelY
        },
        scaleDuration: 370,
        scaleEase: 'sineOut',
    }),
    continuous: (scaleFrom, scaleTo, travelY) => ({
        fromValues: {
            scale: scaleFrom,
            travel: travelY
        },
        toValues: {
            scale: scaleTo,
            travel: -travelY
        },
        scaleDuration: 775,
        scaleEase: 'sineInOut',
    }),
};
/**
 * Shrink Scroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        power,
        range = 'in',
        scale = range === 'in' ? 1.2 : 0.8,
        speed = 0
    } = _a, params = __rest(_a, ["power", "range", "scale", "speed"]);
    const sequence = kit.sequence(params);
    const {
        scaleFrom,
        scaleTo,
        travelY
    } = typeof power !== 'undefined' ?
        powerMap[power] :
        {
            scaleFrom: scale,
            scaleTo: scale,
            travelY: speed,
        };
    const {
        fromValues,
        toValues,
        scaleDuration,
        scaleEase
    } = rangeValues[range](scaleFrom, scaleTo, travelY * -MAX_Y_TRAVEL);
    const duration = power === 'hard' ? scaleDuration : 1000;
    sequence.add([
        kit.animate('BaseScale', elements, duration, 0, {
            from: {
                scale: fromValues.scale
            },
            to: {
                scale: toValues.scale
            },
            ease: scaleEase,
        }),
        kit.animate('BasePosition', elements, 1000, 0, {
            from: {
                y: `${fromValues.travel}vh`
            },
            to: {
                y: `${toValues.travel}vh`
            },
            ease: 'linear',
        }),
    ]);
    return sequence.get();
}
const api = {
    getScrubOffsets({
        power,
        range = 'in',
        speed = 0,
    }) {
        const offset = (typeof power !== 'undefined' ?
            powerMap[power].travelY :
            Math.abs(speed)) * MAX_Y_TRAVEL;
        return {
            start: range === 'out' ? '0px' : `${-offset}vh`,
            end: range === 'in' ? '0px' : `${offset}vh`,
        };
    },
};
export {
    name,
    properties,
    animate,
    api
};
//# sourceMappingURL=shrinkScroll.js.map