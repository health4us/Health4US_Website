import {
    __rest
} from "tslib";
import {
    getAdjustedDirection,
    translatePoint,
} from '../../../../utils/animationsUtils';
const name = 'PunchIn';
const properties = {
    schema: {},
};
const paramsMap = {
    'top-left': {
        y: -1.1,
        x: -1.1,
        idx: 0
    },
    'top-right': {
        y: -1.1,
        x: 1.1,
        idx: 1
    },
    'bottom-right': {
        y: 1.1,
        x: 1.1,
        idx: 2
    },
    'bottom-left': {
        y: 1.1,
        x: -1.1,
        idx: 3
    },
};
const center = {
    y: 0,
    x: 0
};
const easeParams = {
    // [Amplitude, Frequency]
    soft: [0.6, 0.25],
    medium: [0.9, 0.22],
    hard: [1.3, 0.2],
};

function animate(kit, elements, duration, delay, _a = {}) {
    var {
        compRotation = 0, direction = 'top-right', power = 'medium'
    } = _a, params = __rest(_a, ["compRotation", "direction", "power"]);
    const partOneDuration = duration * 0.3;
    const partTwoDuration = duration - partOneDuration;
    const sequence = kit.sequence(params);
    sequence.add(kit.animate('BaseFade', elements, 0, 0, {
        to: {
            opacity: 0.01
        }
    }));
    sequence.add(kit.animate('BaseFade', elements, partOneDuration, delay, {
        to: {
            opacity: 1,
        },
        ease: 'cubicIn',
    }), 'animation-start');
    elements.forEach((element) => {
        const bounds = kit.engine.getElementRect(element);
        const angleInDeg = compRotation;
        const adjDirection = (direction !== 'center' ?
            getAdjustedDirection(paramsMap, direction, angleInDeg) :
            direction);
        const normalizedDirection = paramsMap[adjDirection] || center;
        const sourcePoint = translatePoint((bounds.width / 2) * normalizedDirection.x, (bounds.height / 2) * normalizedDirection.y, angleInDeg);
        const midPoint = translatePoint((bounds.width / 3) * normalizedDirection.x, (bounds.height / 3) * normalizedDirection.y, angleInDeg);
        sequence.add([
            kit.animate('BasePosition', element, partOneDuration, delay, {
                from: {
                    x: sourcePoint.x,
                    y: sourcePoint.y
                },
                to: {
                    x: midPoint.x,
                    y: midPoint.y
                },
                ease: 'expoIn',
            }),
            kit.animate('BaseScale', element, partOneDuration, delay, {
                from: {
                    scale: 0
                },
                to: {
                    scale: 0.3
                },
                ease: 'expoIn',
            }),
        ], 'animation-start');
        sequence.add([
            kit.animate('BasePosition', element, partTwoDuration, 0, {
                to: {
                    x: 0,
                    y: 0
                },
                ease: `elastic.out(${easeParams[power]})`,
            }),
            kit.animate('BaseScale', element, partTwoDuration, 0, {
                to: {
                    scale: 1
                },
                ease: `elastic.out(${easeParams[power]})`,
            }),
        ], `animation-start+=${partOneDuration + delay}`);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=punchIn.js.map