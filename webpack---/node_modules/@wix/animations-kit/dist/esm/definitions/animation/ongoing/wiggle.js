import {
    __rest
} from "tslib";
import {
    keyframesToDuration,
    mapRange
} from '../../../utils/animationsUtils';
const name = 'Wiggle';
const properties = {
    schema: {},
};
const keyframes_transY_rotate = [{
        keyframe: 18,
        transY: -10,
        accRotate: 10
    },
    {
        keyframe: 35,
        transY: 0,
        accRotate: -18
    },
    {
        keyframe: 53,
        transY: 0,
        accRotate: 14
    },
    {
        keyframe: 73,
        transY: 0,
        accRotate: -10
    },
    {
        keyframe: 100,
        transY: 0,
        accRotate: 4
    },
];
const powerMap = {
    soft: {
        wiggleFactor: 1
    },
    medium: {
        wiggleFactor: 2
    },
    hard: {
        wiggleFactor: 4
    },
};
/**
 * Wiggle animation object
 */
function animate(kit, elements, duration, delay, _a = {}) {
    var {
        power,
        intensity = 0.5
    } = _a, params = __rest(_a, ["power", "intensity"]);
    const sequence = kit.sequence(params);
    const durations = keyframesToDuration(keyframes_transY_rotate, duration);
    const responsiveWiggleFactor = mapRange(0, 1, powerMap.soft.wiggleFactor, powerMap.hard.wiggleFactor, intensity);
    const wiggleFactor = typeof power !== 'undefined' ?
        powerMap[power].wiggleFactor :
        responsiveWiggleFactor;
    keyframes_transY_rotate.forEach(({
        transY,
        accRotate
    }, index) => {
        sequence.add([
            kit.animate('BasePosition', elements, durations[index], 0, {
                to: {
                    y: `${transY * wiggleFactor}px`,
                },
            }),
            kit.animate('BaseRotate', elements, durations[index], 0, {
                to: {
                    rotation: `+=${accRotate * wiggleFactor}deg`,
                },
            }),
        ]);
    });
    sequence.add(kit.animate('BaseNone', elements, delay, 0)); // add repeat delay
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=wiggle.js.map