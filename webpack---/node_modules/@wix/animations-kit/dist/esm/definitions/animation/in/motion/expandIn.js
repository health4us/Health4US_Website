import {
    __rest
} from "tslib";
import {
    getAdjustedDirection,
    getElementTransformedPosition,
} from '../../../../utils/animationsUtils';
import {
    deg2rad
} from '@wix/wow-utils';
const name = 'ExpandIn';
const properties = {
    schema: {},
};
const scaleMap = {
    soft: 0.8,
    medium: 0.6,
    hard: 0,
};
const paramsMap = {
    top: {
        origin: '50% 0',
        idx: 0
    },
    'top-right': {
        origin: '100% 0',
        idx: 1
    },
    right: {
        origin: '100% 50%',
        idx: 2
    },
    'bottom-right': {
        origin: '100% 100%',
        idx: 3
    },
    bottom: {
        origin: '50% 100%',
        idx: 4
    },
    'bottom-left': {
        origin: '0 100%',
        idx: 5
    },
    left: {
        origin: '0 50%',
        idx: 6
    },
    'top-left': {
        origin: '0 0',
        idx: 7
    },
    // center: { origin: '50% 50%' },
};

function animate(kit, elements, duration, delay, _a = {}) {
    var {
        power,
        initialScale = 0,
        direction = 'center',
        easing = 'cubicInOut'
    } = _a, params = __rest(_a, ["power", "initialScale", "direction", "easing"]);
    const sequence = kit.sequence(params);
    const scale = typeof power !== 'undefined' ? scaleMap[power] : initialScale;
    if (direction !== 'center') {
        elements.forEach((element) => {
            const elementAngleInDeg = Number(kit.engine.getProperty(element, '--comp-rotate-z') || 0);
            let adjDirection = direction;
            adjDirection = getAdjustedDirection(paramsMap, direction, elementAngleInDeg);
            const [trOriginX, trOriginY] = paramsMap[adjDirection].origin.split(' ');
            const {
                x,
                y
            } = getElementTransformedPosition({
                x: trOriginX,
                y: trOriginY
            }, kit.engine.getBoundingRect(element), deg2rad(elementAngleInDeg));
            sequence.add(kit.engine.set(element, {
                x,
                y,
                transformOrigin: paramsMap[adjDirection].origin,
            }));
        });
    }
    sequence.add(kit.animate('BaseFade', elements, 0, 0, {
        to: {
            opacity: 0.01
        }
    }));
    sequence.add([
        kit.animate('BaseFade', elements, duration, delay, {
            to: {
                opacity: 1
            },
            ease: 'linear',
        }),
        kit.animate('BaseScale', elements, duration, delay, {
            from: {
                scale
            },
            ease: easing,
            immediateRender: false,
        }),
    ]);
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=expandIn.js.map