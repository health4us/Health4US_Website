import {
    __rest
} from "tslib";
import {
    getAdjustedDirection,
    translatePoint,
} from '../../../../utils/animationsUtils';
const name = 'BounceIn';
const properties = {
    hideOnStart: true,
    viewportThreshold: 0.15,
    groups: ['entrance', 'animation'],
    schema: {
        duration: {
            type: 'number',
            min: 0,
            default: 0,
        },
        delay: {
            type: 'number',
            min: 0,
            default: 0,
        },
        bounce: {
            type: 'string',
            enum: ['soft', 'medium', 'hard'],
            default: 'medium',
        },
        direction: {
            type: 'string',
            enum: ['top left', 'top right', 'center', 'bottom right', 'bottom left'],
            default: 'top left',
        },
    },
};
const paramsMap = {
    'top left': {
        y: -1.1,
        x: -1.1,
        idx: 0
    },
    'top right': {
        y: -1.1,
        x: 1.1,
        idx: 1
    },
    'bottom right': {
        y: 1.1,
        x: 1.1,
        idx: 2
    },
    'bottom left': {
        y: 1.1,
        x: -1.1,
        idx: 3
    },
};
const easeParams = {
    // [Amplitude, Frequency]
    soft: [0.6, 0.25],
    medium: [0.9, 0.22],
    hard: [1.3, 0.2],
};

function animate(kit, elements, duration, delay, _a = {}) {
    var {
        direction = properties.schema.direction.default, bounce = properties.schema.bounce.default
    } = _a, params = __rest(_a, ["direction", "bounce"]);
    const partOneDuration = duration * 0.3;
    const partTwoDuration = duration - partOneDuration;
    const sequence = kit.sequence(params);
    sequence.add(kit.animate('BaseFade', elements, 0, 0, {
        to: {
            opacity: 0.01
        }
    }));
    sequence.add(kit.animate('BaseFade', elements, partOneDuration, delay, {
        to: {
            opacity: 1,
        },
        ease: 'Cubic.easeIn',
    }), 'animation-start');
    elements.forEach((element) => {
        const bounds = kit.engine.getElementRect(element);
        const angleInDeg = element.getAttribute('data-angle') || 0;
        const adjDirection = (direction !== 'center' ?
            getAdjustedDirection(paramsMap, direction, Number(angleInDeg)) :
            direction);
        const normalizedDirection = paramsMap[adjDirection] || {
            y: 0,
            x: 0
        };
        const sourcePoint = translatePoint((bounds.width / 2) * normalizedDirection.x, (bounds.height / 2) * normalizedDirection.y, Number(angleInDeg));
        const midPoint = translatePoint((bounds.width / 3) * normalizedDirection.x, (bounds.height / 3) * normalizedDirection.y, Number(angleInDeg));
        sequence.add([
            kit.animate('BasePosition', element, partOneDuration, delay, {
                from: {
                    x: sourcePoint.x,
                    y: sourcePoint.y
                },
                to: {
                    x: midPoint.x,
                    y: midPoint.y
                },
                ease: 'Expo.easeIn',
            }),
            kit.animate('BaseScale', element, partOneDuration, delay, {
                from: {
                    scale: 0
                },
                to: {
                    scale: 0.3
                },
                ease: 'Expo.easeIn',
                immediateRender: false,
            }),
        ], 'animation-start');
        sequence.add([
            kit.animate('BasePosition', element, partTwoDuration, 0, {
                to: {
                    x: 0,
                    y: 0
                },
                ease: 'Elastic.easeOut',
                easeParams: easeParams[bounce],
            }),
            kit.animate('BaseScale', element, partTwoDuration, 0, {
                to: {
                    scale: 1
                },
                ease: 'Elastic.easeOut',
                easeParams: easeParams[bounce],
            }),
        ], `animation-start+=${partOneDuration + delay}`);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=bounceIn.js.map