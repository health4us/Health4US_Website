import {
    __rest
} from "tslib";
const name = 'SkewPanScroll';
const properties = {
    schema: {},
};
const ease = 'linear';
const powerMap = {
    soft: {
        skewX: 10
    },
    medium: {
        skewX: 17
    },
    hard: {
        skewX: 24
    },
};
const directionMap = {
    right: -1,
    left: 1,
};
const rangeValues = { in: (skewX, startX, _endX) => ({
        fromValues: {
            skewX,
            startX
        },
        toValues: {
            skewX: 0,
            endX: 0
        },
    }),
    out: (skewX, startX, _endX) => ({
        fromValues: {
            skewX: 0,
            startX: 0
        },
        toValues: {
            skewX: -skewX,
            endX: startX
        },
    }),
    continuous: (skewX, startX, endX) => ({
        fromValues: {
            skewX,
            startX
        },
        toValues: {
            skewX: -skewX,
            endX
        },
    }),
};
/**
 * SkewPanScroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        skew = 10, direction = 'right', power, range = 'in'
    } = _a, params = __rest(_a, ["skew", "direction", "power", "range"]);
    const sequence = kit.sequence(params);
    elements.forEach((element) => {
        const {
            left,
            width
        } = element.getBoundingClientRect();
        const {
            innerWidth
        } = kit.frame;
        const positions = {
            left: {
                startX: -left - width,
                endX: innerWidth - left,
            },
            right: {
                startX: innerWidth - left,
                endX: -left - width,
            },
        };
        const skewX = (typeof power === 'undefined' ? skew : powerMap[power].skewX) *
            directionMap[direction];
        const {
            startX,
            endX
        } = positions[direction];
        const {
            fromValues,
            toValues
        } = rangeValues[range](skewX, startX, endX);
        sequence.add([
            kit.animate('BaseSkew', element, 1000, 0, {
                from: {
                    skewX: fromValues.skewX
                },
                to: {
                    skewX: toValues.skewX
                },
                ease,
            }),
            kit.animate('BasePosition', element, 1000, 0, {
                from: {
                    x: fromValues.startX
                },
                to: {
                    x: toValues.endX
                },
                ease,
            }),
        ]);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=skewPanScroll.js.map