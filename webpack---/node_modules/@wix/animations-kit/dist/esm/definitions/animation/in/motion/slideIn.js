import {
    __rest
} from "tslib";
import {
    getClipParams,
    getAdjustedDirection,
    getTransformTweenParams,
} from '../../../../utils/animationsUtils';
import {
    deg2rad
} from '@wix/wow-utils';
const name = 'SlideIn';
const properties = {
    schema: {}
};
const paramsMap = {
    top: {
        dx: 0,
        dy: -1,
        idx: 0,
        clip: 'bottom'
    },
    right: {
        dx: 1,
        dy: 0,
        idx: 1,
        clip: 'left'
    },
    bottom: {
        dx: 0,
        dy: 1,
        idx: 2,
        clip: 'top'
    },
    left: {
        dx: -1,
        dy: 0,
        idx: 3,
        clip: 'right'
    },
};
const powerMap = {
    soft: {
        initialTranslate: 0.2
    },
    medium: {
        initialTranslate: 0.8
    },
    hard: {
        initialTranslate: 1
    },
};

function animate(kit, elements, duration, delay, _a = {}) {
    var {
        direction = 'left', power, initialTranslate = 1, easing = 'cubicInOut'
    } = _a, params = __rest(_a, ["direction", "power", "initialTranslate", "easing"]);
    const sequence = kit.sequence(params);
    if (power !== 'hard') {
        sequence.add(kit.animate('BaseFade', elements, duration, delay, {
            from: {
                opacity: 0
            },
            to: {
                opacity: 1
            },
            ease: 'cubicInOut',
        }));
    }
    // Original functions use absolute sizes in percent, new ones relative in fraction,
    // So translating to: 100 - NEW_VALUE * 100
    const scale = typeof power === 'undefined' ?
        initialTranslate :
        powerMap[power].initialTranslate;
    const minimum = 100 - scale * 100;
    elements.forEach((element) => {
        const compRect = kit.engine.getBoundingRect(element);
        const contentRect = kit.engine.getBoundingContentRect(element);
        const elementAngleInDeg = Number(kit.engine.getProperty(element, '--comp-rotate-z') || 0);
        const adjDirection = getAdjustedDirection(paramsMap, direction, elementAngleInDeg);
        const clip = getClipParams(compRect, contentRect, paramsMap[adjDirection].clip, {
            minimum
        });
        const position = getTransformTweenParams(contentRect, paramsMap[adjDirection], deg2rad(elementAngleInDeg), scale);
        sequence.add([
            kit.animate('BaseClipPath', element, duration, delay, {
                from: clip,
                ease: easing,
            }),
            kit.animate('BasePosition', element, duration, delay, {
                from: position,
                ease: easing,
            }),
        ], 0);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=slideIn.js.map