import {
    __rest
} from "tslib";
const name = 'TurnScroll';
const properties = {
    schema: {},
};
const ease = 'linear';
const ELEMENT_ROTATION = 45;
const powerMap = {
    soft: {
        scaleFrom: 1,
        scaleTo: 1
    },
    medium: {
        scaleFrom: 0.7,
        scaleTo: 1.3
    },
    hard: {
        scaleFrom: 0.4,
        scaleTo: 1.6
    },
};
const directionMap = {
    right: -1,
    left: 1,
};
const spinDirectionMap = {
    clockwise: 1,
    'counter-clockwise': -1,
};
const rangeValues = { in: (rotate, scale, travel) => ({
        fromValues: {
            rotation: rotate,
            scale: scale.scaleFrom,
            position: travel.startX,
        },
        toValues: {
            rotation: rotate,
            scale: 1,
            position: 0
        },
    }),
    out: (rotate, scale, travel) => ({
        fromValues: {
            rotation: 0,
            scale: 1,
            position: 0
        },
        toValues: {
            rotation: rotate,
            scale: scale.scaleFrom,
            position: travel.endX,
        },
    }),
    continuous: (rotate, scale, travel) => ({
        fromValues: {
            rotation: rotate,
            scale: scale.scaleFrom,
            position: travel.startX,
        },
        toValues: {
            rotation: rotate * 2,
            scale: scale.scaleTo,
            position: travel.endX,
        },
    }),
};
/**
 * TurnScroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        scale = 1, spin = 'clockwise', direction = 'right', power, range = 'in'
    } = _a, params = __rest(_a, ["scale", "spin", "direction", "power", "range"]);
    const sequence = kit.sequence(params);
    elements.forEach((element) => {
        const {
            left,
            width
        } = element.getBoundingClientRect();
        const {
            innerWidth
        } = kit.frame;
        const positions = {
            left: {
                startX: -left - width,
                endX: innerWidth - left,
            },
            right: {
                startX: innerWidth - left,
                endX: -left - width,
            },
        };
        const travelX = positions[direction];
        const rotateAngle = ELEMENT_ROTATION * spinDirectionMap[spin];
        const scaleFactors = typeof power !== 'undefined' ?
            powerMap[power] :
            {
                scaleFrom: scale,
                scaleTo: scale
            };
        const {
            fromValues,
            toValues
        } = rangeValues[range](rotateAngle, scaleFactors, travelX);
        sequence.add([
            kit.animate('BaseRotate', element, 1000, 0, {
                from: {
                    rotation: `-=${fromValues.rotation}deg`
                },
                to: {
                    rotation: `+=${toValues.rotation}deg`
                },
                ease,
            }),
            kit.animate('BaseScale', element, 1000, 0, {
                from: {
                    scale: fromValues.scale
                },
                to: {
                    scale: toValues.scale
                },
                ease,
            }),
            kit.animate('BasePosition', element, 1000, 0, {
                from: {
                    x: fromValues.position
                },
                to: {
                    x: toValues.position
                },
                ease,
            }),
        ]);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=turnScroll.js.map