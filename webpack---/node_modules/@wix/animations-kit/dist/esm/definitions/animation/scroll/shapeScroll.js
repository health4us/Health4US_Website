import {
    __rest
} from "tslib";
const name = 'ShapeScroll';
const properties = {
    schema: {},
};
const ease = 'circInOut';
const shapes = {
    diamond: {
        start: {
            soft: 'polygon(50% 20%, 80% 50%, 50% 80%, 20% 50%)',
            medium: 'polygon(50% 40%, 60% 50%, 50% 60%, 40% 50%)',
            hard: 'polygon(50% 50%, 50% 50%, 50% 50%, 50% 50%)',
        },
        end: 'polygon(50% -50%, 150% 50%, 50% 150%, -50% 50%)',
    },
    window: {
        start: {
            soft: 'inset(20% round 50% 50% 0% 0%)',
            medium: 'inset(35% round 50% 50% 0% 0%)',
            hard: 'inset(50% round 50% 50% 0% 0%)',
        },
        end: 'inset(-20% round 50% 50% 0% 0%)',
    },
    rectangle: {
        start: {
            soft: 'inset(20%)',
            medium: 'inset(50%)',
            hard: 'inset(80%)',
        },
        end: 'inset(0%)',
    },
    circle: {
        start: {
            soft: 'circle(40%)',
            medium: 'circle(25%)',
            hard: 'circle(0%)',
        },
        end: 'circle(75%)',
    },
    ellipse: {
        start: {
            soft: 'ellipse(50% 50%)',
            medium: 'ellipse(30% 30%)',
            hard: 'ellipse(0% 0%)',
        },
        end: 'ellipse(75% 75%)',
    },
};
const responsiveShapes = {
    diamond: (clipFactor) => {
        const clip = clipFactor / 2;
        const clipNeg = 100 - clip;
        return [
            `polygon(50% ${clip}%, ${clipNeg}% 50%, 50% ${clipNeg}%, ${clip}% 50%)`,
            'polygon(50% -50%, 150% 50%, 50% 150%, -50% 50%)',
        ];
    },
    window: (clipFactor) => [
        `inset(${clipFactor / 2}% round 50% 50% 0% 0%)`,
        'inset(-20% round 50% 50% 0% 0%)',
    ],
    rectangle: (clipFactor) => [`inset(${clipFactor}%)`, `inset(0%)`],
    circle: (clipFactor) => [
        `circle(${100 - clipFactor}%)`,
        `circle(75%)`,
    ],
    ellipse: (clipFactor) => {
        const clip = 50 - clipFactor / 2;
        return [`ellipse(${clip}% ${clip}%)`, `ellipse(75% 75%)`];
    },
};
const rangeValues = { in: (start, end) => ({
        fromValue: {
            webkitClipPath: start,
            clipPath: start
        },
        toValue: {
            webkitClipPath: end,
            clipPath: end
        },
    }),
    out: (start, end) => ({
        fromValue: {
            webkitClipPath: end,
            clipPath: end
        },
        toValue: {
            webkitClipPath: start,
            clipPath: start
        },
    }),
};
/**
 * ShapeScroll
 */
function animate(kit, elements, _duration, _delay, _a = {}) {
    var {
        shape = 'circle', power, intensity = 0.5, range = 'in'
    } = _a, params = __rest(_a, ["shape", "power", "intensity", "range"]);
    const sequence = kit.sequence(params);
    const [start, end] = typeof power !== 'undefined' ?
        [shapes[shape].start[power], shapes[shape].end] :
        responsiveShapes[shape](intensity * 100);
    const {
        fromValue,
        toValue
    } = rangeValues[range](start, end);
    sequence.add(kit.animate('BaseClipPath', elements, 1000, 0, {
        from: fromValue,
        to: toValue,
        ease,
    }));
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=shapeScroll.js.map