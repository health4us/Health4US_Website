import {
    __rest
} from "tslib";
import {
    getAdjustedDirection
} from '../../../../utils/animationsUtils';
const name = 'CurveIn';
const properties = {
    schema: {},
};
const paramsMap = {
    pseudoRight: {
        angleX: '180',
        angleY: '0',
        idx: 0
    },
    right: {
        angleX: '0',
        angleY: '180',
        idx: 1
    },
    pseudoLeft: {
        angleX: '-180',
        angleY: '0',
        idx: 2
    },
    left: {
        angleX: '0',
        angleY: '-180',
        idx: 3
    },
};

function getRotate3DParams(direction) {
    return {
        rotationX: paramsMap[direction].angleX,
        rotationY: paramsMap[direction].angleY,
    };
}

function getTransformOriginParams(element) {
    return `50% 50% ${-1.5 * element.offsetWidth}`;
}

function animate(kit, elements, duration, delay, _a = {}) {
    var {
        compRotation = 0, direction = 'right'
    } = _a, params = __rest(_a, ["compRotation", "direction"]);
    const sequence = kit.sequence(params);
    sequence.add(kit.animate('BaseFade', elements, duration, delay, {
        from: {
            opacity: 0
        },
        to: {
            opacity: 1
        },
        ease: 'quadOut',
        // ease: 'Sine.easeInOut',
    }));
    elements.forEach((element) => {
        const adjDirection = getAdjustedDirection(paramsMap, direction, Number(compRotation));
        const rotate3DParams = getRotate3DParams(adjDirection);
        const transformOriginParams = getTransformOriginParams(element);
        sequence
            .add(kit.engine.set(element, {
                transformOrigin: transformOriginParams
            }), 0)
            .add(kit.animate('BaseRotate3D', element, duration, delay, {
                from: rotate3DParams,
                perspective: 200,
                ease: 'quadOut',
                // ease: 'Sine.easeInOut',
            }), 0);
    });
    return sequence.get();
}
export {
    name,
    properties,
    animate
};
//# sourceMappingURL=curveIn.js.map