export const toInpMetric = (metric, getHtmlElementMetadata) => {
    const {
        value,
        attribution
    } = metric;
    const htmlElementMetadata = getHtmlElementMetadata(attribution.eventEntry ? .target);
    // Retrieve loAF related to this INP only
    const inpStartTime = attribution.eventEntry ? .startTime || 0;
    const inpEndTime = (attribution.eventEntry ? .startTime || 0) +
        (attribution.eventEntry ? .duration || 0);
    const loafs = performance
        .getEntriesByType('long-animation-frame')
        .filter(({
            startTime: loafStartTime,
            duration
        }) => {
            const loafEndTime = loafStartTime + duration;
            return loafEndTime >= inpStartTime && loafStartTime <= inpEndTime;
        });
    return {
        inpValue: Math.trunc(value),
        inpRating: metric.rating,
        inpEventType: attribution.eventType,
        inpTargetSelector: attribution.eventTarget,
        inpStartTime: attribution.eventTime ?
            Math.trunc(attribution.eventTime) :
            undefined,
        inpProcessingStart: attribution.eventEntry ? .processingStart ?
            Math.trunc(attribution.eventEntry.processingStart) :
            undefined,
        inpProcessingEnd: attribution.eventEntry ? .processingEnd ?
            Math.trunc(attribution.eventEntry.processingEnd) :
            undefined,
        inpInteractionId: attribution.eventEntry ? .interactionId,
        inpLoadState: attribution.loadState,
        ...(htmlElementMetadata.compType && {
            inpComponentType: htmlElementMetadata.compType,
        }),
        ...(htmlElementMetadata.widgetId && {
            inpWidgetId: htmlElementMetadata.widgetId,
        }),
        ...(htmlElementMetadata.applicationId && {
            inpApplicationId: htmlElementMetadata.applicationId,
        }),
        ...(loafs.length > 0 && {
            metadata: {
                loafs
            }
        }),
    };
};
//# sourceMappingURL=inp.js.map