export const toClsMetric = (metric, getHtmlElementMetadata) => {
    const {
        value,
        attribution
    } = metric;
    const htmlElementMetadata = getHtmlElementMetadata(attribution.largestShiftSource ? .node);
    return {
        clsVal: value.toString(),
        clsLargestShiftVal: attribution.largestShiftValue ? .toString(),
        clsLargestShiftTime: attribution.largestShiftTime ?
            Math.trunc(attribution.largestShiftTime) :
            undefined,
        clsRating: metric.rating,
        clsLargestShiftTarget: attribution.largestShiftTarget,
        ...(htmlElementMetadata.compType && {
            clsComponentType: htmlElementMetadata.compType,
        }),
        ...(htmlElementMetadata.widgetId && {
            clsWidgetId: htmlElementMetadata.widgetId,
        }),
        ...(htmlElementMetadata.applicationId && {
            clsApplicationId: htmlElementMetadata.applicationId,
        }),
    };
};
//# sourceMappingURL=cls.js.map