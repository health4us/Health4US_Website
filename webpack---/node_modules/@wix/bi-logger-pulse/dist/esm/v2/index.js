/**
 * A function to create a log object for the 'webVitalsReport180' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReport180Params} params - The parameters for this event
 * @property {string} clsApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} clsComponentType - Eclosing component type of an element that CAUSED largest layout shift
 * @property {string} clsLargestShiftTarget - The cls_largest_shift_target value
 * @property {number} clsLargestShiftTime - When the largest layout shift occured
 * @property {string} clsLargestShiftVal - The clsLargestShift value
 * @property {string} clsRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} clsVal - The cls value
 * @property {string} clsWidgetId - Enclosing widget id of an element that CAUSED largest layout shift
 * @property {number} fcp - The fcp Value
 * @property {string} inpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} inpComponentType - Eclosing component type of an element that was interacted with
 * @property {string} inpEventType - The `type` of the `event` dispatched corresponding to INP
 * @property {number} inpInteractionId - Uniquely identifies a user interaction which triggered a series of associated events. For example a click will trigger a sequence of events - pointerdown, pointerup, and click.
 * @property {string} inpLoadState - The inp_load_state value
 * @property {number} inpProcessingEnd - The time the last event handler triggered by the interaction finished executing.
 * @property {number} inpProcessingStart - The time at which event triggered by the interaction is dispatched. This is when event handlers are about to be executed.
 * @property {string} inpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {number} inpStartTime - The time when the user interacted for the event corresponding to INP
 * @property {string} inpTargetSelector - The inpTargetSelector value
 * @property {number} inpValue - The inp value
 * @property {string} inpWidgetId - Enclosing widget id of an element that was interacted with
 * @property {boolean} isSoftNavEnabled - True is it is Soft Nav Enabled
 * @property {number} lcp - The lcp Value
 * @property {string} lcpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} lcpComponentType - Eclosing component type of the LCP element
 * @property {string} lcpContentType - jpeg | png | gif | svg | webp | other
 * @property {number} lcpElementRenderDelay - The delta between when the LCP resource finishes loading until the LCP element is fully rendered
 * @property {string} lcpInitiatorType - A string representing the web platform feature that initiated the performance entry (css, fetch, body etc.)
 * @property {string} lcpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {number} lcpResourceLoadDelay - The delta between TTFB and when the browser starts loading the LCP resource (if there is one, otherwise 0)
 * @property {number} lcpResourceLoadTime - The total time it takes to load the LCP resource itself (if there is one, otherwise 0)
 * @property {number} lcpSize - The intrinsic size of the element returned as the area (width * height).
 * @property {string} lcpTag - HTML Element type (span/p/img/picture etc.)
 * @property {string} lcpUrl - The URL (if applicable) of the LCP image resource
 * @property {string} lcpWidgetId - Enclosing widget id of the LCP element
 * @property {string} metadata - Stringified JSON object containing dynamic data
 * @property {string} navType - 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender' | 'restore' | 'soft-navigation'
 * @property {string} navigationId - The navigation Id
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @property {number} ttfb - The ttfb Value
 * @property {Url} url - The canonical page URL
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example - {“Measure”:value,” Measure:value”..}
 * @return {LogObject<webVitalsReport180Params>} LogObject<webVitalsReport180Params>
 */
export function webVitalsReport180(params) {
    return {
        evid: 180,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'pulseUpdated' event (evid: 182)
 *
 * Event description: Sent when pulse library is updated
 *
 * @param {pulseUpdatedParams} params - The parameters for this event
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @return {LogObject<pulseUpdatedParams>} LogObject<pulseUpdatedParams>
 */
export function pulseUpdated(params) {
    return {
        evid: 182,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'pulseInitialized' event (evid: 181)
 *
 * Event description: This event is sent when Pulse library has been initialized
 *
 * @param {pulseInitializedParams} params - The parameters for this event
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @return {LogObject<pulseInitializedParams>} LogObject<pulseInitializedParams>
 */
export function pulseInitialized(params) {
    return {
        evid: 181,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'pulseError' event (evid: 183)
 *
 * Event description: Sent when an error happens in Pulse library
 *
 * @param {pulseErrorParams} params - The parameters for this event
 * @property {string} message - Error message
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @property {string} step - Where the error happens in the code
 * @return {LogObject<pulseErrorParams>} LogObject<pulseErrorParams>
 */
export function pulseError(params) {
    return {
        evid: 183,
        src: 72,
        endpoint: 'pulse',
        params: params
    };
}
/**
 * A function to create a log object for the 'webVitalsReport18011' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReport18011Params} params - The parameters for this event
 * @property {string} clsApplicationId
 * @property {string} clsComponentType
 * @property {string} clsLargestShiftTarget
 * @property {number} clsLargestShiftTime
 * @property {string} clsLargestShiftVal
 * @property {string} clsRating
 * @property {string} clsVal
 * @property {string} clsWidgetId
 * @property {number} fcp
 * @property {string} inpApplicationId
 * @property {string} inpComponentType
 * @property {string} inpEventType
 * @property {number} inpInteractionId
 * @property {string} inpLoadState
 * @property {number} inpProcessingEnd
 * @property {number} inpProcessingStart
 * @property {string} inpRating
 * @property {number} inpStartTime
 * @property {string} inpTargetSelector
 * @property {number} inpValue
 * @property {string} inpWidgetId
 * @property {boolean} isSoftNavEnabled
 * @property {number} lcp
 * @property {string} lcpApplicationId
 * @property {string} lcpComponentType
 * @property {string} lcpContentType
 * @property {number} lcpElementRenderDelay
 * @property {string} lcpInitiatorType
 * @property {string} lcpRating
 * @property {number} lcpResourceLoadDelay
 * @property {number} lcpResourceLoadTime
 * @property {number} lcpSize
 * @property {string} lcpTag
 * @property {string} lcpUrl
 * @property {string} lcpWidgetId
 * @property {string} metadata - Json dictionary of metadata
 * @property {string} navType
 * @property {string} navigationId
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId
 * @property {number} ttfb
 * @property {Url} url - The site url
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example -  {“Measure”:value,” Measure:value”..}
 * @return {LogObject<webVitalsReport18011Params>} LogObject<webVitalsReport18011Params>
 */
export function webVitalsReport18011(params) {
    return {
        evid: 180,
        src: 11,
        endpoint: 'pulse',
        params: params
    };
}
//# sourceMappingURL=index.js.map