const SuperlogAdapter = require('./superlog-adapter');
const ASPECT_LOGGER_FACTORY = Symbol.for('WNP_LOGGER_FACTORY_BY_ASPECTS');


function createExternalLogger({
    name,
    aspects,
    data
}) {
    const externalFactory = global[ASPECT_LOGGER_FACTORY];
    if (externalFactory) {
        return new SuperlogAdapter(externalFactory({
            aspects,
            name,
            data
        }));
    }
}

function externalLoggerFactory({
    name,
    aspects,
    data
}) {
    const externalLogger = createExternalLogger({
        name,
        aspects,
        data
    });
    return externalLogger ? externalLogger : new DynamicHolderLog(name);
}

class DynamicHolderLog {
    constructor(name) {
        this._name = name;
        ['info', 'debug', 'trace', 'warn', 'error'].forEach(level => {
            this[level] = (...args) => {
                this._log = this._log || createExternalLogger({
                    name: this._name
                });

                if (this._log) {
                    this._log[level](...args);
                }
            };
        });
    }

    withRequest(req) {
        return this.withAspects(req.aspects);
    }

    withAspects(aspects) {
        return externalLoggerFactory({
            name: this._name,
            aspects
        });
    }

    withData(data) {
        return externalLoggerFactory({
            name: this._name,
            data
        });
    }
}

module.exports = {
    externalLoggerFactory,
    ASPECT_LOGGER_FACTORY
};