class CompositeLog {
    constructor(...logs) {
        this._delegate = (method, ...args) => logs.forEach(log => log[method](...args));

        this._newLogger = (method, ...args) => {
            const newLogs = logs.map(log => log[method](...args));
            return new CompositeLog(...newLogs);
        };
    }

    withRequest(req) {
        return this._newLogger('withRequest', req);
    }

    withAspects(aspects) {
        return this._newLogger('withAspects', aspects);
    }

    withData(data) {
        return this._newLogger('withData', data);
    }

    trace(...args) {
        this._delegate('trace', ...args);
    }

    debug(...args) {
        this._delegate('debug', ...args);
    }

    info(...args) {
        this._delegate('info', ...args);
    }

    warn(...args) {
        this._delegate('warn', ...args);
    }

    error(...args) {
        this._delegate('error', ...args);
    }
}

module.exports = CompositeLog;