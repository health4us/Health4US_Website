var __spreadArray = (this && this.__spreadArray) || function(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import {
    ConverterType
} from './serializer/domain';
import {
    schemaSerializer
} from './serializer/serializer';
import {
    protobufConverters
} from './serializer/protobuf-converters/converters';
import {
    typeToConverterSet
} from './serializer/utils';
var ambassadorConverters = typeToConverterSet(__spreadArray([], protobufConverters, true));
export function serializer(rootSchema, depSchemas) {
    if (depSchemas === void 0) {
        depSchemas = {};
    }
    var transform = schemaSerializer(rootSchema, depSchemas, ambassadorConverters);
    return {
        fromJSON: function(jsonOrString) {
            var jsonOrText = safeJsonParse(jsonOrString) || jsonOrString;
            return transform(jsonOrText, ConverterType.FROM_JSON);
        },
        toJSON: function(json) {
            return transform(json, ConverterType.TO_JSON);
        },
    };
}

function safeJsonParse(someString) {
    try {
        return JSON.parse(someString);
    } catch (error) {}
}
//# sourceMappingURL=ambassador-index.js.map