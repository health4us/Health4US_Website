var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export function typeToConverterSet(converterSets) {
    return converterSets.reduce(function(result, converterSet) {
        var types = converterSet.types.reduce(function(typeResult, type) {
            var _a;
            return __assign(__assign({}, typeResult), (_a = {}, _a[type] = converterSet, _a));
        }, {});
        return __assign(__assign({}, result), types);
    }, {});
}
//# sourceMappingURL=utils.js.map