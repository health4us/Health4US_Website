import {
    createException,
    RegistryErrorCode
} from '../createException';
export const EXTERNAL_REGISTRY_OVERRIDE_NAMESPACE = 'registry';
export function getRegistryBundleID(host) {
    return `${host}Registry`;
}
export function getRegistryManifestURL(baseURL) {
    return `${baseURL}/registry-manifest.min.json`;
}
export async function loadExternalRegistry({
    resourceLoader,
    url,
    host,
}) {
    const response = await resourceLoader.fetch({
        url: getRegistryManifestURL(url),
    });
    const manifest = JSON.parse(response);
    const id = getRegistryBundleID(host);
    if (!manifest[`${id}.js`]) {
        throw createException(RegistryErrorCode.NoRegistryOverrideForHost);
    }
    const loadBundle = resourceLoader.createBundleLoader({
        environment: {}
    });
    const runtimeURL = manifest['webpack-runtime.js'];
    if (runtimeURL) {
        await loadBundle({
            url: runtimeURL,
        });
    }
    const bundleUrl = manifest[`${id}.js`];
    const registry = await loadBundle({
        url: bundleUrl,
        id,
    });
    return registry.default;
}
//# sourceMappingURL=loadExternalRegistry.js.map