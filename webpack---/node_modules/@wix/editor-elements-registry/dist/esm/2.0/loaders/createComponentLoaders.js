import {
    isCSS,
    isJS,
    yieldToMain
} from '../utils';
import {
    createException,
    RegistryErrorCode
} from '../createException';
export function getComponentAssets({
    resource,
    parts = {},
}) {
    const assets = [];
    const applyAssets = (_resource) => {
        if (_resource ? .src) {
            if (_resource.id && _resource.src.js) {
                assets.push({
                    id: _resource.id,
                    url: _resource.src.js,
                    type: 'model',
                });
            }
            if (_resource.src.css) {
                assets.push({
                    url: _resource.src.css,
                    type: 'style',
                });
            }
            _resource.src.deps ? .forEach(dep => {
                assets.push({
                    url: dep,
                    dependency: true,
                    type: isJS(dep) ? 'model' : 'style',
                });
            });
        }
    };
    applyAssets(resource);
    Object.keys(parts).forEach(partName => {
        applyAssets(parts[partName]);
    });
    return assets;
}
export function createComponentLoader({
    resource,
    parts = {},
    loadBundle,
    statics,
}) {
    const loader = async (part) => {
        /**
         * TODO:
         * - filter model & part deps
         */
        if (resource.src.deps) {
            await Promise.all([
                ...resource.src.deps.filter(isJS).map(dep => loadBundle({
                    url: dep,
                })),
                loadBundle({
                    assets: resource.src.deps.filter(isCSS),
                }),
            ]);
        }
        const tasks = [];
        if (part) {
            const componentPart = parts[part];
            tasks.push(loadBundle({
                id: componentPart.id,
                url: componentPart.src.js,
                assets: [componentPart.src.css],
            }));
        } else if (resource.id) {
            tasks.push(loadBundle({
                id: resource.id,
                url: resource.src.js,
                assets: [resource.src.css],
            }));
            const batchRequests = Object.keys(parts)
                /**
                 * get eager parts
                 */
                .filter(partName => parts[partName].batched);
            batchRequests.forEach(partName => {
                const batchedPart = parts[partName];
                tasks.push(loadBundle({
                    id: batchedPart.id,
                    url: batchedPart.src.js,
                    assets: [batchedPart.src.css],
                }));
            });
        }
        const bundles = await Promise.all(tasks);
        if (bundles.some(bundle => !bundle || !bundle.components)) {
            throw createException(RegistryErrorCode.NoComponentsAtComponentBundle, '', {
                missingBundle: resource.name,
            });
        }
        const model = Object.assign({}, ...bundles.map((bundle) => bundle ? bundle.components[resource.name] : {}));
        return part ? model[part] : model;
    };
    loader.isPartExist = part => part in parts;
    loader.statics = statics;
    loader.assets = getComponentAssets({
        resource,
        parts
    });
    return loader;
}
export async function createLazyComponentLoaders({
    manifest,
    loadBundle,
}) {
    const components = manifest.getComponents();
    // Break down the long task to smaller tasks
    await yieldToMain();
    const parts = manifest.getParts();
    const loaders = {};
    Object.keys(components).forEach(componentName => {
        loaders[componentName] = createComponentLoader({
            resource: components[componentName],
            parts: parts[componentName],
            loadBundle,
            statics: manifest.getStatics(componentName),
        });
    });
    return loaders;
}
export async function createEagerComponentLoaders({
    manifest,
    loadBundle,
}) {
    const components = manifest.getComponents();
    const parts = manifest.getParts();
    const resource = manifest.getHostBundleModel();
    if (!resource.src.js || !resource.id) {
        return {};
    }
    const bundle = await loadBundle({
        id: resource.id,
        url: resource.src.js,
        assets: [resource.src.css],
    });
    if (!bundle || !bundle.components) {
        throw createException(RegistryErrorCode.NoComponentsAtHostBundle);
    }
    const loaders = {};
    Object.keys(bundle.components).forEach(componentName => {
        const loader = (() => Promise.resolve(bundle.components[componentName]));
        loader.assets = getComponentAssets({
            resource: components[componentName],
            parts: parts[componentName],
        });
        loader.statics = manifest.getStatics(componentName);
        loader.isPartExist = () => true;
        loaders[componentName] = loader;
    });
    return loaders;
}
//# sourceMappingURL=createComponentLoaders.js.map