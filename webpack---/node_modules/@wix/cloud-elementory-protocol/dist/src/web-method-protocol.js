"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getBackendPackageNameFromImportName = exports.generateBackendPackageWebMethodUrl = exports.generatePackageWebMethodUrl = exports.exceptionToWebMethodPayload = exports.resultToWebMethodPayload = void 0;
var converters_1 = require("./converters");
var resultToWebMethodPayload = function(resultObj, replacer) {
    var result = replacer ? JSON.parse(JSON.stringify(resultObj, replacer)) : (0, converters_1.convertToCustomFormat)(resultObj);
    return result === undefined ? {} : {
        result: result
    };
};
exports.resultToWebMethodPayload = resultToWebMethodPayload;
var exceptionToWebMethodPayload = function(error, messageProcessor,
    // This is turned off because we need TS to identify that the stackProcessor is a (s?: string) => string function.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    stackProcessor) {
    if (messageProcessor === void 0) {
        messageProcessor = function(arg) {
            return arg;
        };
    }
    if (stackProcessor === void 0) {
        stackProcessor = function(stack) {
            return "";
        };
    }
    var result = error instanceof Error ?
        {
            message: messageProcessor(error.message),
            name: error.name,
            stack: stackProcessor(error.stack),
            code: error.code,
            _elementoryError: true,
        } :
        error;
    return {
        result: result,
        exception: true,
    };
};
exports.exceptionToWebMethodPayload = exceptionToWebMethodPayload;
var generatePackageWebMethodUrl = function(packageName, methodName) {
    return "/_webMethods/packages/".concat(encodeURIComponent(packageName), "/").concat(methodName, ".ajax");
};
exports.generatePackageWebMethodUrl = generatePackageWebMethodUrl;
var generateBackendPackageWebMethodUrl = function(packageName, methodName) {
    return generatePackageWebMethodUrl("".concat(packageName, "-backend"), methodName);
};
exports.generateBackendPackageWebMethodUrl = generateBackendPackageWebMethodUrl;
var getBackendPackageNameFromImportName = function(importName) {
    return "".concat(importName, "-backend");
};
exports.getBackendPackageNameFromImportName = getBackendPackageNameFromImportName;
//# sourceMappingURL=web-method-protocol.js.map