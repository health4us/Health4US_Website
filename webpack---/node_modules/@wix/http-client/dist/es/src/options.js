import {
    ORIGINAL_HOST_HEADER,
    ORIGINAL_PROTOCOL_HEADER,
    ORIGINAL_URL_HEADER,
} from './constants';
import {
    composeHeaders
} from './headers';
import {
    changeHost,
    extractHost,
    extractProtocol,
    isAbsoluteUrl,
    toSearchQueryParams,
} from './utils';
export const buildOptions = ({
    requestOptions,
    urlObject,
    headers,
    globalConfig = {
        httpMockServer: {
            enabled: false,
        },
    },
}) => {
    const {
        url,
        params
    } = requestOptions;
    if (params) {
        if (typeof params !== 'object') {
            throw new Error('Search params must be an object');
        }
    }
    const localConfigOptions = maybeRedirectToMockServer(url, globalConfig);
    const newOptions = Object.assign(Object.assign(Object.assign({}, requestOptions), localConfigOptions), {
        headers
    });
    return newOptions;
};
export const buildAllHeaders = (requestOptions, wixHeadersOpts, globalConfig = {
    httpMockServer: {
        enabled: false,
    },
}, urlObject) => {
    const {
        url,
        disableWixHeaders,
        headers
    } = requestOptions;
    const composedHeaders = composeHeaders({
        url,
        disableWixHeaders,
        wixHeadersOpts,
    });
    const originalUrlHeader = getUrlHeaders(globalConfig, requestOptions, urlObject);
    return Object.assign(Object.assign(Object.assign({}, composedHeaders), lowerAllJsonKeys(headers)), originalUrlHeader);
};
export const getUrlHeaders = (globalConfig, requestOptions, urlObject) => {
    const {
        url,
        params
    } = requestOptions;
    const {
        host,
        protocol
    } = urlObject;
    const originalUrlHeader = globalConfig.httpMockServer.enabled ?
        {
            [ORIGINAL_URL_HEADER]: buildUrlFromRequest(url, params),
            [ORIGINAL_HOST_HEADER]: isAbsoluteUrl(url) ? extractHost(url) : host,
            [ORIGINAL_PROTOCOL_HEADER]: isAbsoluteUrl(url) ?
                extractProtocol(url) :
                protocol,
        } :
        {};
    return originalUrlHeader;
};

function maybeRedirectToMockServer(url, globalConfig) {
    if (globalConfig.httpMockServer.enabled) {
        const mockUrl = new URL(globalConfig.httpMockServer.mockServerUrl);
        return {
            url: changeHost(url, mockUrl.host),
        };
    }
    return {};
}

function buildUrlFromRequest(url, requestParams) {
    const {
        pathname,
        searchParams
    } = new URL(url, 'http://unused.com');
    requestParams = requestParams || searchParams;
    if (requestParams) {
        const params = toSearchQueryParams(requestParams) || requestParams.toString();
        const paramsAsString = params ? `?${params}` : '';
        return `${pathname}${paramsAsString}`;
    }
    return pathname;
}

function lowerAllJsonKeys(objectToChange) {
    objectToChange = objectToChange || {};
    const result = Object.keys(objectToChange).reduce((prev, key) => (Object.assign(Object.assign({}, prev), {
        [key.toLowerCase()]: objectToChange[key]
    })), {});
    return result;
}
//# sourceMappingURL=options.js.map