'use strict'

const Ok = value => ({
    map: cb => Ok(cb(value)),
    chain: cb => cb(value),
    fold: (_, cb) => cb(value),
    getOrElse: () => value,
    merge: () => value
})

const Error = value => ({
    map: () => Error(value),
    chain: () => Error(value),
    fold: cb => cb(value),
    getOrElse: fallback => fallback,
    merge: () => value
})

const try_ = cb => {
    try {
        return Ok(cb())
    } catch (e) {
        return Error(e)
    }
}

const fromNullable = (val, error) => (val != null ? Ok(val) : Error(error))
const fromMaybe = (maybe, error) =>
    maybe.fold(
        () => Error(error),
        val => Ok(val)
    )
const of = val => Ok(val)

const Result = {
    Ok,
    Error,
    try: try_,
    fromNullable,
    fromMaybe,
    of
}

module.exports = Result